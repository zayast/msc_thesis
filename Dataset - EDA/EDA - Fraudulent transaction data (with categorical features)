{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM9BTZbf5Jbyq4FyGqF327i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"u82pkANv6KzH","executionInfo":{"status":"ok","timestamp":1761912712426,"user_tz":-480,"elapsed":2298,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EBT1DPPD7aq-","executionInfo":{"status":"ok","timestamp":1761912876430,"user_tz":-480,"elapsed":33091,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"6777034f-ff44-48bc-a0e2-f243125e0a4b"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["train_path = '/content/drive/MyDrive/datasets/fraudTrain.csv'\n","\n","train_df = pd.read_csv(train_path)\n","\n","test_path = '/content/drive/MyDrive/datasets/fraudTest.csv'\n","\n","test_df = pd.read_csv(test_path)\n","\n","# Combine train + test\n","df = pd.concat([train_df, test_df], ignore_index=True)"],"metadata":{"id":"Rvw2l1y67e5q","executionInfo":{"status":"ok","timestamp":1761912927633,"user_tz":-480,"elapsed":20385,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_yQWSQAF8oZc","executionInfo":{"status":"ok","timestamp":1761913838493,"user_tz":-480,"elapsed":340,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"10bdcdc0-5929-4964-fbdf-8e64a213ec53"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                             merchant       category     amt gender  \\\n","0          fraud_Rippin, Kub and Mann       misc_net    4.97      F   \n","1     fraud_Heller, Gutmann and Zieme    grocery_pos  107.23      F   \n","2                fraud_Lind-Buckridge  entertainment  220.11      M   \n","3  fraud_Kutch, Hermiston and Farrell  gas_transport   45.00      M   \n","4                 fraud_Keeling-Crist       misc_pos   41.96      M   \n","\n","             city state    zip      lat      long  city_pop  \\\n","0  Moravian Falls    NC  28654  36.0788  -81.1781      3495   \n","1          Orient    WA  99160  48.8878 -118.2105       149   \n","2      Malad City    ID  83252  42.1808 -112.2620      4154   \n","3         Boulder    MT  59632  46.2306 -112.1138      1939   \n","4        Doe Hill    VA  24433  38.4207  -79.4629        99   \n","\n","                                 job   unix_time  merch_lat  merch_long  \\\n","0          Psychologist, counselling  1325376018  36.011293  -82.048315   \n","1  Special educational needs teacher  1325376044  49.159047 -118.186462   \n","2        Nature conservation officer  1325376051  43.150704 -112.154481   \n","3                    Patent attorney  1325376076  47.034331 -112.561071   \n","4     Dance movement psychotherapist  1325376186  38.674999  -78.632459   \n","\n","   is_fraud  \n","0         0  \n","1         0  \n","2         0  \n","3         0  \n","4         0  "],"text/html":["\n","  <div id=\"df-1299c2eb-9206-47a7-a8e8-1df66e634a44\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>merchant</th>\n","      <th>category</th>\n","      <th>amt</th>\n","      <th>gender</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>job</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>fraud_Rippin, Kub and Mann</td>\n","      <td>misc_net</td>\n","      <td>4.97</td>\n","      <td>F</td>\n","      <td>Moravian Falls</td>\n","      <td>NC</td>\n","      <td>28654</td>\n","      <td>36.0788</td>\n","      <td>-81.1781</td>\n","      <td>3495</td>\n","      <td>Psychologist, counselling</td>\n","      <td>1325376018</td>\n","      <td>36.011293</td>\n","      <td>-82.048315</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>fraud_Heller, Gutmann and Zieme</td>\n","      <td>grocery_pos</td>\n","      <td>107.23</td>\n","      <td>F</td>\n","      <td>Orient</td>\n","      <td>WA</td>\n","      <td>99160</td>\n","      <td>48.8878</td>\n","      <td>-118.2105</td>\n","      <td>149</td>\n","      <td>Special educational needs teacher</td>\n","      <td>1325376044</td>\n","      <td>49.159047</td>\n","      <td>-118.186462</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>fraud_Lind-Buckridge</td>\n","      <td>entertainment</td>\n","      <td>220.11</td>\n","      <td>M</td>\n","      <td>Malad City</td>\n","      <td>ID</td>\n","      <td>83252</td>\n","      <td>42.1808</td>\n","      <td>-112.2620</td>\n","      <td>4154</td>\n","      <td>Nature conservation officer</td>\n","      <td>1325376051</td>\n","      <td>43.150704</td>\n","      <td>-112.154481</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>fraud_Kutch, Hermiston and Farrell</td>\n","      <td>gas_transport</td>\n","      <td>45.00</td>\n","      <td>M</td>\n","      <td>Boulder</td>\n","      <td>MT</td>\n","      <td>59632</td>\n","      <td>46.2306</td>\n","      <td>-112.1138</td>\n","      <td>1939</td>\n","      <td>Patent attorney</td>\n","      <td>1325376076</td>\n","      <td>47.034331</td>\n","      <td>-112.561071</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>fraud_Keeling-Crist</td>\n","      <td>misc_pos</td>\n","      <td>41.96</td>\n","      <td>M</td>\n","      <td>Doe Hill</td>\n","      <td>VA</td>\n","      <td>24433</td>\n","      <td>38.4207</td>\n","      <td>-79.4629</td>\n","      <td>99</td>\n","      <td>Dance movement psychotherapist</td>\n","      <td>1325376186</td>\n","      <td>38.674999</td>\n","      <td>-78.632459</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1299c2eb-9206-47a7-a8e8-1df66e634a44')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1299c2eb-9206-47a7-a8e8-1df66e634a44 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1299c2eb-9206-47a7-a8e8-1df66e634a44');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-bc072a0d-c0cb-491a-acbb-3da6a79a1a56\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bc072a0d-c0cb-491a-acbb-3da6a79a1a56')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-bc072a0d-c0cb-491a-acbb-3da6a79a1a56 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["drop_cols = [\"Unnamed: 0\",\n","             \"first\",       # super high cardinality, person-identifying, not behaviour\n","             \"last\",        # super high cardinality, person-identifying, not behaviour\n","             \"street\",      # too granular, noisy.\n","             \"trans_num\",   # unique per transaction\n","             \"dob\",         # age exists\n","             \"trans_date_trans_time\",  #unix_time exists\n","             \"cc_num\"    # we want the model to learn pattern only from transaction, not card identity.\n","             ]\n","df = df.drop(columns=[c for c in drop_cols if c in df.columns])"],"metadata":{"id":"5kKt0auYHWjW","executionInfo":{"status":"ok","timestamp":1761914310386,"user_tz":-480,"elapsed":395,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RU8J8-fh8tyh","executionInfo":{"status":"ok","timestamp":1761914311443,"user_tz":-480,"elapsed":13,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"60d5478f-3a31-49ef-8ea5-4de139c0375c"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1852394 entries, 0 to 1852393\n","Data columns (total 15 columns):\n"," #   Column      Dtype  \n","---  ------      -----  \n"," 0   merchant    object \n"," 1   category    object \n"," 2   amt         float64\n"," 3   gender      object \n"," 4   city        object \n"," 5   state       object \n"," 6   zip         int64  \n"," 7   lat         float64\n"," 8   long        float64\n"," 9   city_pop    int64  \n"," 10  job         object \n"," 11  unix_time   int64  \n"," 12  merch_lat   float64\n"," 13  merch_long  float64\n"," 14  is_fraud    int64  \n","dtypes: float64(5), int64(4), object(6)\n","memory usage: 212.0+ MB\n"]}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"dy7YAwuX8yh1","executionInfo":{"status":"ok","timestamp":1761914315145,"user_tz":-480,"elapsed":1135,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"aef21ed0-1b28-44ba-a7e5-42f9a84c6976"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                amt           zip           lat          long      city_pop  \\\n","count  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06   \n","mean   7.006357e+01  4.881326e+04  3.853931e+01 -9.022783e+01  8.864367e+04   \n","std    1.592540e+02  2.688185e+04  5.071470e+00  1.374789e+01  3.014876e+05   \n","min    1.000000e+00  1.257000e+03  2.002710e+01 -1.656723e+02  2.300000e+01   \n","25%    9.640000e+00  2.623700e+04  3.466890e+01 -9.679800e+01  7.410000e+02   \n","50%    4.745000e+01  4.817400e+04  3.935430e+01 -8.747690e+01  2.443000e+03   \n","75%    8.310000e+01  7.204200e+04  4.194040e+01 -8.015800e+01  2.032800e+04   \n","max    2.894890e+04  9.992100e+04  6.669330e+01 -6.795030e+01  2.906700e+06   \n","\n","          unix_time     merch_lat    merch_long      is_fraud  \n","count  1.852394e+06  1.852394e+06  1.852394e+06  1.852394e+06  \n","mean   1.358674e+09  3.853898e+01 -9.022794e+01  5.210015e-03  \n","std    1.819508e+07  5.105604e+00  1.375969e+01  7.199217e-02  \n","min    1.325376e+09  1.902742e+01 -1.666716e+02  0.000000e+00  \n","25%    1.343017e+09  3.474012e+01 -9.689944e+01  0.000000e+00  \n","50%    1.357089e+09  3.936890e+01 -8.744069e+01  0.000000e+00  \n","75%    1.374581e+09  4.195626e+01 -8.024511e+01  0.000000e+00  \n","max    1.388534e+09  6.751027e+01 -6.695090e+01  1.000000e+00  "],"text/html":["\n","  <div id=\"df-aa007dd9-bdcc-4910-b15a-dab22fbfc56b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>amt</th>\n","      <th>zip</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","      <td>1.852394e+06</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>7.006357e+01</td>\n","      <td>4.881326e+04</td>\n","      <td>3.853931e+01</td>\n","      <td>-9.022783e+01</td>\n","      <td>8.864367e+04</td>\n","      <td>1.358674e+09</td>\n","      <td>3.853898e+01</td>\n","      <td>-9.022794e+01</td>\n","      <td>5.210015e-03</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.592540e+02</td>\n","      <td>2.688185e+04</td>\n","      <td>5.071470e+00</td>\n","      <td>1.374789e+01</td>\n","      <td>3.014876e+05</td>\n","      <td>1.819508e+07</td>\n","      <td>5.105604e+00</td>\n","      <td>1.375969e+01</td>\n","      <td>7.199217e-02</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000e+00</td>\n","      <td>1.257000e+03</td>\n","      <td>2.002710e+01</td>\n","      <td>-1.656723e+02</td>\n","      <td>2.300000e+01</td>\n","      <td>1.325376e+09</td>\n","      <td>1.902742e+01</td>\n","      <td>-1.666716e+02</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>9.640000e+00</td>\n","      <td>2.623700e+04</td>\n","      <td>3.466890e+01</td>\n","      <td>-9.679800e+01</td>\n","      <td>7.410000e+02</td>\n","      <td>1.343017e+09</td>\n","      <td>3.474012e+01</td>\n","      <td>-9.689944e+01</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>4.745000e+01</td>\n","      <td>4.817400e+04</td>\n","      <td>3.935430e+01</td>\n","      <td>-8.747690e+01</td>\n","      <td>2.443000e+03</td>\n","      <td>1.357089e+09</td>\n","      <td>3.936890e+01</td>\n","      <td>-8.744069e+01</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>8.310000e+01</td>\n","      <td>7.204200e+04</td>\n","      <td>4.194040e+01</td>\n","      <td>-8.015800e+01</td>\n","      <td>2.032800e+04</td>\n","      <td>1.374581e+09</td>\n","      <td>4.195626e+01</td>\n","      <td>-8.024511e+01</td>\n","      <td>0.000000e+00</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.894890e+04</td>\n","      <td>9.992100e+04</td>\n","      <td>6.669330e+01</td>\n","      <td>-6.795030e+01</td>\n","      <td>2.906700e+06</td>\n","      <td>1.388534e+09</td>\n","      <td>6.751027e+01</td>\n","      <td>-6.695090e+01</td>\n","      <td>1.000000e+00</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa007dd9-bdcc-4910-b15a-dab22fbfc56b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-aa007dd9-bdcc-4910-b15a-dab22fbfc56b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-aa007dd9-bdcc-4910-b15a-dab22fbfc56b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-a8196dd5-85b1-4722-9d0f-776a5a1cd060\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8196dd5-85b1-4722-9d0f-776a5a1cd060')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-a8196dd5-85b1-4722-9d0f-776a5a1cd060 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 653517.5088979691,\n        \"min\": 1.0,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          70.06356747538595,\n          47.45,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 639300.2986635149,\n        \"min\": 1257.0,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          48813.25819075207,\n          48174.0,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654907.7398900028,\n        \"min\": 5.071470391381677,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38.539310979251724,\n          39.3543,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654949.1996561234,\n        \"min\": -165.6723,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -90.22783229070049,\n          -87.4769,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1110647.142165938,\n        \"min\": 23.0,\n        \"max\": 2906700.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          88643.67450931066,\n          2443.0,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unix_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 624236720.6819692,\n        \"min\": 1852394.0,\n        \"max\": 1388534374.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1358674218.8343642,\n          1357089331.0,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654907.742284222,\n        \"min\": 5.105603877593036,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          38.53897596705938,\n          39.368900499999995,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654949.2067758968,\n        \"min\": -166.671575,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -90.22793950913791,\n          -87.44069350000001,\n          1852394.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 654920.1250078016,\n        \"min\": 0.0,\n        \"max\": 1852394.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.005210014716091717,\n          1.0,\n          0.07199217499528407\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X2Wzji2O86v4","executionInfo":{"status":"ok","timestamp":1761914317565,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"4a0c47c3-6fbb-4d4b-843c-2fbec02735f9"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(1852394, 15)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["target = 'is_fraud'"],"metadata":{"id":"hokkILfQFGgk","executionInfo":{"status":"ok","timestamp":1761914325411,"user_tz":-480,"elapsed":36,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["fraud_trans_count = (df[target] == 1).sum()\n","valid_trans_count = (df[target] == 0).sum()\n","\n","print(\"Number of fraud transactions:\", fraud_trans_count)\n","print(\"Number of valid transactions:\", valid_trans_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kPP-BBFK8_2B","executionInfo":{"status":"ok","timestamp":1761914328219,"user_tz":-480,"elapsed":17,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"7ad1a5ba-a03a-433f-b810-aac14fd464af"},"execution_count":18,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of fraud transactions: 9651\n","Number of valid transactions: 1842743\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 8))\n","\n","is_fraud_count = df[target].value_counts()\n","\n","plt.pie(is_fraud_count, labels=['No', 'Yes'], autopct=\"%0.1f%%\")\n","plt.title('Is Fraud')\n","plt.show()\n","# Highly imbalanced"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":675},"id":"zu1yBGXI9ahP","executionInfo":{"status":"ok","timestamp":1761914335753,"user_tz":-480,"elapsed":720,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"644f4114-23cd-40ec-b714-7773bc90b37b"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Show first 10 attacks\n","df[df[target] == 1].head(10)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"iOwyhBdD92kp","executionInfo":{"status":"ok","timestamp":1761914339107,"user_tz":-480,"elapsed":128,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"fe88d40f-55ac-40e6-9513-cd7b7a8d21db"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                              merchant       category     amt gender  \\\n","2449            fraud_Rutherford-Mertz    grocery_pos  281.06      M   \n","2472  fraud_Jenkins, Hauck and Friesen  gas_transport   11.52      F   \n","2523            fraud_Goodwin-Nitzsche    grocery_pos  276.31      F   \n","2546            fraud_Erdman-Kertzmann  gas_transport    7.03      M   \n","2553                fraud_Koepp-Parker    grocery_pos  275.73      F   \n","2937                fraud_Medhurst PLC   shopping_net  844.80      M   \n","3527               fraud_Ruecker Group       misc_net  843.91      M   \n","3580          fraud_Conroy-Cruickshank  gas_transport   10.76      F   \n","3600                fraud_Koepp-Parker    grocery_pos  332.35      F   \n","3671         fraud_Strosin-Cruickshank    grocery_pos  315.34      F   \n","\n","               city state    zip      lat     long  city_pop  \\\n","2449  Collettsville    NC  28611  35.9946 -81.7266       885   \n","2472    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","2523    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","2546  Collettsville    NC  28611  35.9946 -81.7266       885   \n","2553    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","2937  Collettsville    NC  28611  35.9946 -81.7266       885   \n","3527  Collettsville    NC  28611  35.9946 -81.7266       885   \n","3580    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","3600    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","3671    San Antonio    TX  78208  29.4400 -98.4590   1595797   \n","\n","                           job   unix_time  merch_lat  merch_long  is_fraud  \n","2449            Soil scientist  1325466397  36.430124  -81.179483         1  \n","2472  Horticultural consultant  1325468849  29.819364  -99.142791         1  \n","2523  Horticultural consultant  1325473523  29.273085  -98.836360         1  \n","2546            Soil scientist  1325475483  35.909292  -82.091010         1  \n","2553  Horticultural consultant  1325476547  29.786426  -98.683410         1  \n","2937            Soil scientist  1325511488  35.987802  -81.254332         1  \n","3527            Soil scientist  1325548328  35.985612  -81.383306         1  \n","3580  Horticultural consultant  1325552727  28.856712  -97.794207         1  \n","3600  Horticultural consultant  1325554552  29.320662  -97.937219         1  \n","3671  Horticultural consultant  1325560656  28.953283  -97.806528         1  "],"text/html":["\n","  <div id=\"df-0e85578b-f538-4a31-8537-5bd2142711d4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>merchant</th>\n","      <th>category</th>\n","      <th>amt</th>\n","      <th>gender</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>job</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2449</th>\n","      <td>fraud_Rutherford-Mertz</td>\n","      <td>grocery_pos</td>\n","      <td>281.06</td>\n","      <td>M</td>\n","      <td>Collettsville</td>\n","      <td>NC</td>\n","      <td>28611</td>\n","      <td>35.9946</td>\n","      <td>-81.7266</td>\n","      <td>885</td>\n","      <td>Soil scientist</td>\n","      <td>1325466397</td>\n","      <td>36.430124</td>\n","      <td>-81.179483</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2472</th>\n","      <td>fraud_Jenkins, Hauck and Friesen</td>\n","      <td>gas_transport</td>\n","      <td>11.52</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325468849</td>\n","      <td>29.819364</td>\n","      <td>-99.142791</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2523</th>\n","      <td>fraud_Goodwin-Nitzsche</td>\n","      <td>grocery_pos</td>\n","      <td>276.31</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325473523</td>\n","      <td>29.273085</td>\n","      <td>-98.836360</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2546</th>\n","      <td>fraud_Erdman-Kertzmann</td>\n","      <td>gas_transport</td>\n","      <td>7.03</td>\n","      <td>M</td>\n","      <td>Collettsville</td>\n","      <td>NC</td>\n","      <td>28611</td>\n","      <td>35.9946</td>\n","      <td>-81.7266</td>\n","      <td>885</td>\n","      <td>Soil scientist</td>\n","      <td>1325475483</td>\n","      <td>35.909292</td>\n","      <td>-82.091010</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2553</th>\n","      <td>fraud_Koepp-Parker</td>\n","      <td>grocery_pos</td>\n","      <td>275.73</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325476547</td>\n","      <td>29.786426</td>\n","      <td>-98.683410</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2937</th>\n","      <td>fraud_Medhurst PLC</td>\n","      <td>shopping_net</td>\n","      <td>844.80</td>\n","      <td>M</td>\n","      <td>Collettsville</td>\n","      <td>NC</td>\n","      <td>28611</td>\n","      <td>35.9946</td>\n","      <td>-81.7266</td>\n","      <td>885</td>\n","      <td>Soil scientist</td>\n","      <td>1325511488</td>\n","      <td>35.987802</td>\n","      <td>-81.254332</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3527</th>\n","      <td>fraud_Ruecker Group</td>\n","      <td>misc_net</td>\n","      <td>843.91</td>\n","      <td>M</td>\n","      <td>Collettsville</td>\n","      <td>NC</td>\n","      <td>28611</td>\n","      <td>35.9946</td>\n","      <td>-81.7266</td>\n","      <td>885</td>\n","      <td>Soil scientist</td>\n","      <td>1325548328</td>\n","      <td>35.985612</td>\n","      <td>-81.383306</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3580</th>\n","      <td>fraud_Conroy-Cruickshank</td>\n","      <td>gas_transport</td>\n","      <td>10.76</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325552727</td>\n","      <td>28.856712</td>\n","      <td>-97.794207</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3600</th>\n","      <td>fraud_Koepp-Parker</td>\n","      <td>grocery_pos</td>\n","      <td>332.35</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325554552</td>\n","      <td>29.320662</td>\n","      <td>-97.937219</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3671</th>\n","      <td>fraud_Strosin-Cruickshank</td>\n","      <td>grocery_pos</td>\n","      <td>315.34</td>\n","      <td>F</td>\n","      <td>San Antonio</td>\n","      <td>TX</td>\n","      <td>78208</td>\n","      <td>29.4400</td>\n","      <td>-98.4590</td>\n","      <td>1595797</td>\n","      <td>Horticultural consultant</td>\n","      <td>1325560656</td>\n","      <td>28.953283</td>\n","      <td>-97.806528</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e85578b-f538-4a31-8537-5bd2142711d4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e85578b-f538-4a31-8537-5bd2142711d4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e85578b-f538-4a31-8537-5bd2142711d4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-8e012e98-64a2-4481-bb78-7ce119f68163\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e012e98-64a2-4481-bb78-7ce119f68163')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-8e012e98-64a2-4481-bb78-7ce119f68163 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[df[target] == 1]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"merchant\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 9,\n        \"samples\": [\n          \"fraud_Conroy-Cruickshank\",\n          \"fraud_Jenkins, Hauck and Friesen\",\n          \"fraud_Medhurst PLC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"gas_transport\",\n          \"misc_net\",\n          \"grocery_pos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 306.2670051677856,\n        \"min\": 7.03,\n        \"max\": 844.8,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          332.35,\n          11.52,\n          844.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"San Antonio\",\n          \"Collettsville\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"TX\",\n          \"NC\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25611,\n        \"min\": 28611,\n        \"max\": 78208,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          78208,\n          28611\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.384780885473483,\n        \"min\": 29.44,\n        \"max\": 35.9946,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          29.44,\n          35.9946\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.640574205610797,\n        \"min\": -98.459,\n        \"max\": -81.7266,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -98.459,\n          -81.7266\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 823609,\n        \"min\": 885,\n        \"max\": 1595797,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1595797,\n          885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Horticultural consultant\",\n          \"Soil scientist\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unix_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 40920,\n        \"min\": 1325466397,\n        \"max\": 1325560656,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          1325554552,\n          1325468849\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.4979133995848573,\n        \"min\": 28.856712,\n        \"max\": 36.430124,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          29.320662,\n          29.819364\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.73628068461181,\n        \"min\": -99.142791,\n        \"max\": -81.17948299999999,\n        \"num_unique_values\": 10,\n        \"samples\": [\n          -97.937219,\n          -99.142791\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df.select_dtypes(include = ['object']).nunique()"],"metadata":{"id":"CC-TfI_I-fA4","colab":{"base_uri":"https://localhost:8080/","height":272},"executionInfo":{"status":"ok","timestamp":1761914343707,"user_tz":-480,"elapsed":1447,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"b892df9e-31af-4baa-e5a5-0cd9b28a1484"},"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/plain":["merchant    693\n","category     14\n","gender        2\n","city        906\n","state        51\n","job         497\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>merchant</th>\n","      <td>693</td>\n","    </tr>\n","    <tr>\n","      <th>category</th>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>gender</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>city</th>\n","      <td>906</td>\n","    </tr>\n","    <tr>\n","      <th>state</th>\n","      <td>51</td>\n","    </tr>\n","    <tr>\n","      <th>job</th>\n","      <td>497</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":21}]},{"cell_type":"code","source":["df.select_dtypes(exclude=['object']).nunique()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":366},"id":"Y0xxcN9r_4se","executionInfo":{"status":"ok","timestamp":1761914347823,"user_tz":-480,"elapsed":1157,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"5ef65720-b994-4b22-a506-86958ae47020"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["amt             60616\n","zip               985\n","lat               983\n","long              983\n","city_pop          891\n","unix_time     1819583\n","merch_lat     1754157\n","merch_long    1809753\n","is_fraud            2\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>amt</th>\n","      <td>60616</td>\n","    </tr>\n","    <tr>\n","      <th>zip</th>\n","      <td>985</td>\n","    </tr>\n","    <tr>\n","      <th>lat</th>\n","      <td>983</td>\n","    </tr>\n","    <tr>\n","      <th>long</th>\n","      <td>983</td>\n","    </tr>\n","    <tr>\n","      <th>city_pop</th>\n","      <td>891</td>\n","    </tr>\n","    <tr>\n","      <th>unix_time</th>\n","      <td>1819583</td>\n","    </tr>\n","    <tr>\n","      <th>merch_lat</th>\n","      <td>1754157</td>\n","    </tr>\n","    <tr>\n","      <th>merch_long</th>\n","      <td>1809753</td>\n","    </tr>\n","    <tr>\n","      <th>is_fraud</th>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["df_reduced = df.sample(frac=0.05, random_state=42)\n","\n","print(df_reduced.shape)"],"metadata":{"id":"01rFteHr_7By","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1761914377105,"user_tz":-480,"elapsed":178,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"dc254a68-d554-4980-eb52-cb1928eef4cb"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["(92620, 15)\n"]}]},{"cell_type":"code","source":["anom_count = (df_reduced[target] == 1).sum()\n","normal_count = (df_reduced[target] == 0).sum()\n","\n","print(\"Number of anomaly:\", anom_count)\n","print(\"Number of normals:\", normal_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FR0_sOT7Ilix","executionInfo":{"status":"ok","timestamp":1761914382503,"user_tz":-480,"elapsed":27,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"8b641d64-3518-4acf-a830-b969e2857510"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of anomaly: 507\n","Number of normals: 92113\n"]}]},{"cell_type":"code","source":["#Proportion of attacks in network traffic\n","plt.figure(figsize = (10, 6))\n","is_anom_count = df_reduced[target].value_counts()\n","plt.figure(figsize = (12, 8))\n","plt.pie(is_anom_count, labels = ['No', 'Yes'], autopct=\"%0.1f%%\")\n","plt.title('Is Anomaly')\n","plt.show()\n","#Conclusion: Imbalanced dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":692},"id":"vMCldwrAIvCf","executionInfo":{"status":"ok","timestamp":1761914386700,"user_tz":-480,"elapsed":400,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"d5f44a80-b932-4db5-d943-8f5a465a19bb"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# See how many missing values per column\n","df_reduced.isna().sum()\n","\n","# Or total missing values in the entire dataframe\n","total_nans = df_reduced.isna().sum().sum()\n","print(f\"Total NaN values: {total_nans:,}\")\n","\n","# To quickly view which columns have missing data\n","nan_cols = df_reduced.columns[df.isna().any()].tolist()\n","print(\"Columns with NaNs:\", nan_cols)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y95MdpP4I1ZS","executionInfo":{"status":"ok","timestamp":1761914390609,"user_tz":-480,"elapsed":650,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"dc5623c7-154a-45c5-8c63-defdfd160a3d"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Total NaN values: 0\n","Columns with NaNs: []\n"]}]},{"cell_type":"code","source":["# Check if there are any infinite values\n","inf_mask = df.isin([np.inf, -np.inf])\n","has_inf = inf_mask.any().any()\n","print(f\"Contains infinite values: {has_inf}\")\n","\n","# Count how many per column\n","inf_counts = inf_mask.sum()\n","inf_counts[inf_counts > 0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102},"id":"17-Bhd3hI4qc","executionInfo":{"status":"ok","timestamp":1761914393434,"user_tz":-480,"elapsed":1009,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"c88164ef-dadf-43c0-8672-8f2f83bd093d"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Contains infinite values: False\n"]},{"output_type":"execute_result","data":{"text/plain":["Series([], dtype: int64)"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["df['amt'] = np.log1p(df['amt'])   # Apply log scaling (handles skew)"],"metadata":{"id":"Zl36dlIyI6mU","executionInfo":{"status":"ok","timestamp":1761914416076,"user_tz":-480,"elapsed":76,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["# Separate features and label\n","X = df_reduced.drop(columns=[target])\n","y = df_reduced[target]"],"metadata":{"id":"F5CwqUAxJ15e","executionInfo":{"status":"ok","timestamp":1761914458936,"user_tz":-480,"elapsed":144,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["X_train, X_temp, y_train, y_temp = train_test_split(\n","    X, y, test_size=0.3, stratify=y, random_state=42\n",")\n","\n","# Split temp into validation (15%) and test (15%)\n","X_val, X_test, y_val, y_test = train_test_split(\n","    X_temp, y_temp, test_size=0.5, stratify=y_temp, random_state=42\n",")"],"metadata":{"id":"O2KZaN86J6oB","executionInfo":{"status":"ok","timestamp":1761914465444,"user_tz":-480,"elapsed":4267,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["num_cols = X_train.select_dtypes(include=[np.number]).columns\n","\n","scaler = StandardScaler()\n","\n","X_train[num_cols] = scaler.fit_transform(X_train[num_cols])\n","X_val[num_cols] = scaler.transform(X_val[num_cols])\n","X_test[num_cols] = scaler.transform(X_test[num_cols])"],"metadata":{"id":"ldPKHCVTJ8WP","executionInfo":{"status":"ok","timestamp":1761914521138,"user_tz":-480,"elapsed":31,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["train_df = pd.concat([X_train, y_train], axis=1)\n","valid_df = pd.concat([X_val, y_val], axis=1)\n","test_df = pd.concat([X_test, y_test], axis=1)"],"metadata":{"id":"WS8BhZTVKPxo","executionInfo":{"status":"ok","timestamp":1761914523868,"user_tz":-480,"elapsed":394,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":35,"outputs":[]},{"cell_type":"code","source":["print(f\"Train shape: {train_df.shape}, anomaly ratio={train_df[target].mean():.4%}\")\n","print(f\"Valid shape: {valid_df.shape}, anomaly ratio={valid_df[target].mean():.4%}\")\n","print(f\"Test shape:  {test_df.shape},  anomaly ratio={test_df[target].mean():.4%}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kO2PNOZXKX75","executionInfo":{"status":"ok","timestamp":1761914526788,"user_tz":-480,"elapsed":24,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"c41b397d-a325-4fc6-e0c5-8990bfc7e315"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["Train shape: (64834, 15), anomaly ratio=0.5476%\n","Valid shape: (13893, 15), anomaly ratio=0.5470%\n","Test shape:  (13893, 15),  anomaly ratio=0.5470%\n"]}]},{"cell_type":"code","source":["train_df.head(2)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"XWMBjuieKcKm","executionInfo":{"status":"ok","timestamp":1761914533247,"user_tz":-480,"elapsed":311,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"acf22ccd-7067-46a0-ad4a-da5721b3de1d"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                   merchant  category       amt gender  \\\n","1086232                 fraud_Dickinson Ltd  misc_pos -0.453545      M   \n","1682207  fraud_Crist, Jakubowski and Littel      home  0.001781      M   \n","\n","               city state       zip       lat      long  city_pop  \\\n","1086232    Bessemer    AL -0.515387 -1.025864  0.237889 -0.061366   \n","1682207  Stillwater    OK  0.937055 -0.477239 -0.496432 -0.114606   \n","\n","                               job  unix_time  merch_lat  merch_long  is_fraud  \n","1086232  Radio broadcast assistant   0.318124  -1.007944    0.307828         0  \n","1682207                 Cabin crew   1.440756  -0.322273   -0.494429         0  "],"text/html":["\n","  <div id=\"df-5033eaef-3fd2-4874-a154-b51bd26963e5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>merchant</th>\n","      <th>category</th>\n","      <th>amt</th>\n","      <th>gender</th>\n","      <th>city</th>\n","      <th>state</th>\n","      <th>zip</th>\n","      <th>lat</th>\n","      <th>long</th>\n","      <th>city_pop</th>\n","      <th>job</th>\n","      <th>unix_time</th>\n","      <th>merch_lat</th>\n","      <th>merch_long</th>\n","      <th>is_fraud</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1086232</th>\n","      <td>fraud_Dickinson Ltd</td>\n","      <td>misc_pos</td>\n","      <td>-0.453545</td>\n","      <td>M</td>\n","      <td>Bessemer</td>\n","      <td>AL</td>\n","      <td>-0.515387</td>\n","      <td>-1.025864</td>\n","      <td>0.237889</td>\n","      <td>-0.061366</td>\n","      <td>Radio broadcast assistant</td>\n","      <td>0.318124</td>\n","      <td>-1.007944</td>\n","      <td>0.307828</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1682207</th>\n","      <td>fraud_Crist, Jakubowski and Littel</td>\n","      <td>home</td>\n","      <td>0.001781</td>\n","      <td>M</td>\n","      <td>Stillwater</td>\n","      <td>OK</td>\n","      <td>0.937055</td>\n","      <td>-0.477239</td>\n","      <td>-0.496432</td>\n","      <td>-0.114606</td>\n","      <td>Cabin crew</td>\n","      <td>1.440756</td>\n","      <td>-0.322273</td>\n","      <td>-0.494429</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5033eaef-3fd2-4874-a154-b51bd26963e5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-5033eaef-3fd2-4874-a154-b51bd26963e5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-5033eaef-3fd2-4874-a154-b51bd26963e5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-3683067d-32d3-4033-b596-f1428eec7bb8\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3683067d-32d3-4033-b596-f1428eec7bb8')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-3683067d-32d3-4033-b596-f1428eec7bb8 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df","summary":"{\n  \"name\": \"train_df\",\n  \"rows\": 64834,\n  \"fields\": [\n    {\n      \"column\": \"merchant\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 693,\n        \"samples\": [\n          \"fraud_Kiehn Inc\",\n          \"fraud_Ankunding-Carroll\",\n          \"fraud_Erdman-Durgan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"category\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 14,\n        \"samples\": [\n          \"shopping_net\",\n          \"gas_transport\",\n          \"misc_pos\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amt\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000007712092174,\n        \"min\": -0.47529950759519013,\n        \"max\": 103.43571585941653,\n        \"num_unique_values\": 17874,\n        \"samples\": [\n          0.411181373574768,\n          0.1393530198598291,\n          1.5658993802093657\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"F\",\n          \"M\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 856,\n        \"samples\": [\n          \"Stayton\",\n          \"Chester Heights\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 50,\n        \"samples\": [\n          \"AR\",\n          \"AZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"zip\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000077120921789,\n        \"min\": -1.7711928467022588,\n        \"max\": 1.8932374669120466,\n        \"num_unique_values\": 921,\n        \"samples\": [\n          1.1579785213561404,\n          1.6274597126026478\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000077120922013,\n        \"min\": -3.6478612539012945,\n        \"max\": 5.357406991849704,\n        \"num_unique_values\": 919,\n        \"samples\": [\n          0.7738763616551834,\n          1.3382192318261108\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000007712092171,\n        \"min\": -5.4871927080296885,\n        \"max\": 1.6210598016867834,\n        \"num_unique_values\": 919,\n        \"samples\": [\n          -0.3590775501403869,\n          -2.380938297309173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"city_pop\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000007712092166,\n        \"min\": -0.2973440666661972,\n        \"max\": 9.303904765475659,\n        \"num_unique_values\": 842,\n        \"samples\": [\n          -0.12523899000955904,\n          -0.2759230079532959\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"job\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 483,\n        \"samples\": [\n          \"Neurosurgeon\",\n          \"Air traffic controller\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"unix_time\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.000007712092171,\n        \"min\": -1.830131926418892,\n        \"max\": 1.6464226968601623,\n        \"num_unique_values\": 64792,\n        \"samples\": [\n          0.800693032586655,\n          0.7850007623142159\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000077120921749,\n        \"min\": -3.8157444413200863,\n        \"max\": 5.5006260385665255,\n        \"num_unique_values\": 64719,\n        \"samples\": [\n          0.227206657705137,\n          -0.12758384766434935\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"merch_long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.0000077120921727,\n        \"min\": -5.551247198069493,\n        \"max\": 1.6907110489113195,\n        \"num_unique_values\": 64789,\n        \"samples\": [\n          -0.11841980427573298,\n          0.4374478073763913\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_fraud\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["import os\n","\n","# Create the folder path (it won't exist by default)\n","save_dir = \"/content/drive/MyDrive/datasets/fraud_transaction\"\n","\n","# Make sure the directory exists\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Now safely save your splits\n","train_df.to_csv(f\"{save_dir}/train.csv\", index=False)\n","valid_df.to_csv(f\"{save_dir}/val.csv\", index=False)\n","test_df.to_csv(f\"{save_dir}/test.csv\", index=False)\n","\n","print(\"Files saved in:\", save_dir)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XbJxNyPwKZcX","executionInfo":{"status":"ok","timestamp":1761914582047,"user_tz":-480,"elapsed":2543,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"1a28c278-34f4-4221-ca48-e17aa647e761"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Files saved in: /content/drive/MyDrive/datasets/fraud_transaction\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"tOspYSkpKlgQ"},"execution_count":null,"outputs":[]}]}