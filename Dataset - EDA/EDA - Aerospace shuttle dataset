{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOn3Bwbu/UforIWVYuDUDBM"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":42,"metadata":{"id":"u82pkANv6KzH","executionInfo":{"status":"ok","timestamp":1761921012787,"user_tz":-480,"elapsed":1878,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EBT1DPPD7aq-","executionInfo":{"status":"ok","timestamp":1761917877585,"user_tz":-480,"elapsed":27381,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"4e0ee297-fdb4-4ee4-86db-e0a5b51165c7"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["train_path = '/content/drive/MyDrive/shuttle_test.csv'\n","\n","train_df = pd.read_csv(train_path)\n","\n","test_path = '/content/drive/MyDrive/shuttle_training.csv'\n","\n","test_df = pd.read_csv(test_path)\n","\n","# Combine train + test\n","df = pd.concat([train_df, test_df], ignore_index=True)"],"metadata":{"id":"Rvw2l1y67e5q","executionInfo":{"status":"ok","timestamp":1761917896348,"user_tz":-480,"elapsed":106,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["df.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"_yQWSQAF8oZc","executionInfo":{"status":"ok","timestamp":1761920336738,"user_tz":-480,"elapsed":240,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"b14bc602-798a-45d8-d061-55b6e5701dd8"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   feature1  feature2  feature3  feature4  feature5  feature6  feature7  \\\n","0        55         0        81         0        -6        11        25   \n","1        56         0        96         0        52        -4        40   \n","2        50        -1        89        -7        50         0        39   \n","3        53         9        79         0        42        -2        25   \n","4        55         2        82         0        54        -6        26   \n","\n","   feature8  feature9  label  anomaly  \n","0        88        64      4        1  \n","1        44         4      4        1  \n","2        40         2      1        0  \n","3        37        12      4        1  \n","4        28         2      1        0  "],"text/html":["\n","  <div id=\"df-40d2eb50-b3e6-44d4-a25a-bbe9e6a4d452\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature1</th>\n","      <th>feature2</th>\n","      <th>feature3</th>\n","      <th>feature4</th>\n","      <th>feature5</th>\n","      <th>feature6</th>\n","      <th>feature7</th>\n","      <th>feature8</th>\n","      <th>feature9</th>\n","      <th>label</th>\n","      <th>anomaly</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>81</td>\n","      <td>0</td>\n","      <td>-6</td>\n","      <td>11</td>\n","      <td>25</td>\n","      <td>88</td>\n","      <td>64</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>56</td>\n","      <td>0</td>\n","      <td>96</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>-4</td>\n","      <td>40</td>\n","      <td>44</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>50</td>\n","      <td>-1</td>\n","      <td>89</td>\n","      <td>-7</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>39</td>\n","      <td>40</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>9</td>\n","      <td>79</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>-2</td>\n","      <td>25</td>\n","      <td>37</td>\n","      <td>12</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>55</td>\n","      <td>2</td>\n","      <td>82</td>\n","      <td>0</td>\n","      <td>54</td>\n","      <td>-6</td>\n","      <td>26</td>\n","      <td>28</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-40d2eb50-b3e6-44d4-a25a-bbe9e6a4d452')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-40d2eb50-b3e6-44d4-a25a-bbe9e6a4d452 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-40d2eb50-b3e6-44d4-a25a-bbe9e6a4d452');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-c58b1a13-3d2b-4b30-9efd-a349101446d5\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c58b1a13-3d2b-4b30-9efd-a349101446d5')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-c58b1a13-3d2b-4b30-9efd-a349101446d5 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 58000,\n  \"fields\": [\n    {\n      \"column\": \"feature1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 27,\n        \"max\": 126,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          41,\n          105,\n          48\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 77,\n        \"min\": -4821,\n        \"max\": 5075,\n        \"num_unique_values\": 206,\n        \"samples\": [\n          8,\n          4,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 21,\n        \"max\": 149,\n        \"num_unique_values\": 51,\n        \"samples\": [\n          64,\n          73,\n          21\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 36,\n        \"min\": -3939,\n        \"max\": 3830,\n        \"num_unique_values\": 137,\n        \"samples\": [\n          692,\n          -587,\n          -4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": -188,\n        \"max\": 436,\n        \"num_unique_values\": 54,\n        \"samples\": [\n          2,\n          336,\n          98\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 217,\n        \"min\": -26739,\n        \"max\": 15164,\n        \"num_unique_values\": 299,\n        \"samples\": [\n          -179,\n          209,\n          529\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": -48,\n        \"max\": 105,\n        \"num_unique_values\": 86,\n        \"samples\": [\n          -6,\n          25,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": -353,\n        \"max\": 270,\n        \"num_unique_values\": 123,\n        \"samples\": [\n          51,\n          22,\n          41\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 25,\n        \"min\": -356,\n        \"max\": 266,\n        \"num_unique_values\": 77,\n        \"samples\": [\n          0,\n          28,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 7,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          4,\n          1,\n          7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anomaly\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["drop_cols = [\"label\"]   #remove label as it is for multi-class\n","df = df.drop(columns=[c for c in drop_cols if c in df.columns])"],"metadata":{"id":"RpYD7mGHpP5s","executionInfo":{"status":"ok","timestamp":1761920514517,"user_tz":-480,"elapsed":76,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RU8J8-fh8tyh","executionInfo":{"status":"ok","timestamp":1761920516633,"user_tz":-480,"elapsed":46,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"0a3a521f-1f05-4b09-ecf8-4110f6176511"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 58000 entries, 0 to 57999\n","Data columns (total 10 columns):\n"," #   Column    Non-Null Count  Dtype\n","---  ------    --------------  -----\n"," 0   feature1  58000 non-null  int64\n"," 1   feature2  58000 non-null  int64\n"," 2   feature3  58000 non-null  int64\n"," 3   feature4  58000 non-null  int64\n"," 4   feature5  58000 non-null  int64\n"," 5   feature6  58000 non-null  int64\n"," 6   feature7  58000 non-null  int64\n"," 7   feature8  58000 non-null  int64\n"," 8   feature9  58000 non-null  int64\n"," 9   anomaly   58000 non-null  int64\n","dtypes: int64(10)\n","memory usage: 4.4 MB\n"]}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"dy7YAwuX8yh1","executionInfo":{"status":"ok","timestamp":1761920520060,"user_tz":-480,"elapsed":237,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"b1695458-e1ce-4a10-a8d9-9cdfa0adbf71"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           feature1      feature2      feature3      feature4      feature5  \\\n","count  58000.000000  58000.000000  58000.000000  58000.000000  58000.000000   \n","mean      48.238293     -0.019448     85.349121      0.259672     34.549862   \n","std       12.238082     77.958035      8.902769     36.521516     21.660139   \n","min       27.000000  -4821.000000     21.000000  -3939.000000   -188.000000   \n","25%       38.000000      0.000000     79.000000      0.000000     26.000000   \n","50%       45.000000      0.000000     83.000000      0.000000     42.000000   \n","75%       55.000000      0.000000     89.000000      0.000000     46.000000   \n","max      126.000000   5075.000000    149.000000   3830.000000    436.000000   \n","\n","           feature6      feature7      feature8      feature9       anomaly  \n","count  58000.000000  58000.000000  58000.000000  58000.000000  58000.000000  \n","mean       1.608190     37.092310     50.884552     13.932414      0.214034  \n","std      217.597675     13.111428     21.418051     25.614018      0.410154  \n","min   -26739.000000    -48.000000   -353.000000   -356.000000      0.000000  \n","25%       -5.000000     32.000000     37.000000      0.000000      0.000000  \n","50%        0.000000     39.000000     44.000000      2.000000      0.000000  \n","75%        5.000000     42.000000     60.000000     14.000000      0.000000  \n","max    15164.000000    105.000000    270.000000    266.000000      1.000000  "],"text/html":["\n","  <div id=\"df-826d7256-1874-4525-9b93-c34f3e36cc8c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature1</th>\n","      <th>feature2</th>\n","      <th>feature3</th>\n","      <th>feature4</th>\n","      <th>feature5</th>\n","      <th>feature6</th>\n","      <th>feature7</th>\n","      <th>feature8</th>\n","      <th>feature9</th>\n","      <th>anomaly</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","      <td>58000.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>48.238293</td>\n","      <td>-0.019448</td>\n","      <td>85.349121</td>\n","      <td>0.259672</td>\n","      <td>34.549862</td>\n","      <td>1.608190</td>\n","      <td>37.092310</td>\n","      <td>50.884552</td>\n","      <td>13.932414</td>\n","      <td>0.214034</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>12.238082</td>\n","      <td>77.958035</td>\n","      <td>8.902769</td>\n","      <td>36.521516</td>\n","      <td>21.660139</td>\n","      <td>217.597675</td>\n","      <td>13.111428</td>\n","      <td>21.418051</td>\n","      <td>25.614018</td>\n","      <td>0.410154</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>27.000000</td>\n","      <td>-4821.000000</td>\n","      <td>21.000000</td>\n","      <td>-3939.000000</td>\n","      <td>-188.000000</td>\n","      <td>-26739.000000</td>\n","      <td>-48.000000</td>\n","      <td>-353.000000</td>\n","      <td>-356.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>38.000000</td>\n","      <td>0.000000</td>\n","      <td>79.000000</td>\n","      <td>0.000000</td>\n","      <td>26.000000</td>\n","      <td>-5.000000</td>\n","      <td>32.000000</td>\n","      <td>37.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>45.000000</td>\n","      <td>0.000000</td>\n","      <td>83.000000</td>\n","      <td>0.000000</td>\n","      <td>42.000000</td>\n","      <td>0.000000</td>\n","      <td>39.000000</td>\n","      <td>44.000000</td>\n","      <td>2.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>55.000000</td>\n","      <td>0.000000</td>\n","      <td>89.000000</td>\n","      <td>0.000000</td>\n","      <td>46.000000</td>\n","      <td>5.000000</td>\n","      <td>42.000000</td>\n","      <td>60.000000</td>\n","      <td>14.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>126.000000</td>\n","      <td>5075.000000</td>\n","      <td>149.000000</td>\n","      <td>3830.000000</td>\n","      <td>436.000000</td>\n","      <td>15164.000000</td>\n","      <td>105.000000</td>\n","      <td>270.000000</td>\n","      <td>266.000000</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-826d7256-1874-4525-9b93-c34f3e36cc8c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-826d7256-1874-4525-9b93-c34f3e36cc8c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-826d7256-1874-4525-9b93-c34f3e36cc8c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-d540434e-cbe4-4593-b6ad-818fd72e2adf\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d540434e-cbe4-4593-b6ad-818fd72e2adf')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-d540434e-cbe4-4593-b6ad-818fd72e2adf button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"feature1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20488.372055226802,\n        \"min\": 12.23808169105557,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          48.23829310344828,\n          45.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20659.40415764978,\n        \"min\": -4821.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          58000.0,\n          -0.019448275862068966,\n          5075.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20480.118298943173,\n        \"min\": 8.902768761930357,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          85.34912068965517,\n          83.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20614.6011905492,\n        \"min\": -3939.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          58000.0,\n          0.25967241379310346,\n          3830.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20485.694490807,\n        \"min\": -188.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          34.54986206896552,\n          42.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24014.90065932132,\n        \"min\": -26739.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.6081896551724137,\n          0.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20495.01740957376,\n        \"min\": -48.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          37.09231034482759,\n          39.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20500.229796241194,\n        \"min\": -353.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          50.88455172413793,\n          44.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20508.527740390487,\n        \"min\": -356.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13.932413793103448,\n          2.0,\n          58000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anomaly\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20506.01462339992,\n        \"min\": 0.0,\n        \"max\": 58000.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2140344827586207,\n          1.0,\n          0.41015438972157203\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X2Wzji2O86v4","executionInfo":{"status":"ok","timestamp":1761920523337,"user_tz":-480,"elapsed":60,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"12dbd405-a340-44c5-8771-3f719b59205b"},"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(58000, 10)"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["target = \"anomaly\""],"metadata":{"id":"kPP-BBFK8_2B","executionInfo":{"status":"ok","timestamp":1761920663982,"user_tz":-480,"elapsed":39,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["df[target].value_counts(dropna=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":178},"id":"NWPuUmdspzxb","executionInfo":{"status":"ok","timestamp":1761920666339,"user_tz":-480,"elapsed":76,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"7af0f14d-e409-40b7-94f8-3ad19f72346e"},"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["anomaly\n","0    45586\n","1    12414\n","Name: count, dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","    </tr>\n","    <tr>\n","      <th>anomaly</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>45586</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>12414</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["anomaly_count = (df[target] == 1).sum()\n","normal_count = (df[target] == 0).sum()\n","\n","print(\"Number of anomaly:\", anomaly_count)\n","print(\"Number of normal:\", normal_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zu1yBGXI9ahP","executionInfo":{"status":"ok","timestamp":1761920761220,"user_tz":-480,"elapsed":57,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"98bd3ce8-835a-4c9f-c1d9-d96945883d2b"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of anomaly: 12414\n","Number of normal: 45586\n"]}]},{"cell_type":"code","source":["plt.figure(figsize=(10, 8))\n","\n","is_anom_count = df[target].value_counts()\n","\n","plt.pie(is_anom_count, labels=['No', 'Yes'], autopct=\"%0.1f%%\")\n","plt.title('Is Anomaly')\n","plt.show()\n","#Imbalanced"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":675},"id":"iOwyhBdD92kp","executionInfo":{"status":"ok","timestamp":1761920800187,"user_tz":-480,"elapsed":421,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"77c5b09d-ca46-4086-aea2-abb9926b73e4"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x800 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["# Show first 10 anomalies\n","df[df[target] == 1].head(10)"],"metadata":{"id":"CC-TfI_I-fA4","colab":{"base_uri":"https://localhost:8080/","height":363},"executionInfo":{"status":"ok","timestamp":1761920832295,"user_tz":-480,"elapsed":97,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"434088b8-5296-4a99-bde4-714eba7d43af"},"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    feature1  feature2  feature3  feature4  feature5  feature6  feature7  \\\n","0         55         0        81         0        -6        11        25   \n","1         56         0        96         0        52        -4        40   \n","3         53         9        79         0        42        -2        25   \n","11        56         0        95         0        52        -3        40   \n","17        56         0        78         0        42        -2        22   \n","18        56         0        77         0        18       -18        22   \n","26        55         0        97         0        46        -2        42   \n","35        55         0        95         0        44       -12        40   \n","43        79         0        84         0       -36      -196         4   \n","44        81         0        84         0       -20        26         3   \n","\n","    feature8  feature9  anomaly  \n","0         88        64        1  \n","1         44         4        1  \n","3         37        12        1  \n","11        44         4        1  \n","17        37        14        1  \n","18        59        38        1  \n","26        51         8        1  \n","35        51        12        1  \n","43       120       116        1  \n","44       105       102        1  "],"text/html":["\n","  <div id=\"df-6395fd75-5c40-49a5-a47b-818b9571a175\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature1</th>\n","      <th>feature2</th>\n","      <th>feature3</th>\n","      <th>feature4</th>\n","      <th>feature5</th>\n","      <th>feature6</th>\n","      <th>feature7</th>\n","      <th>feature8</th>\n","      <th>feature9</th>\n","      <th>anomaly</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>81</td>\n","      <td>0</td>\n","      <td>-6</td>\n","      <td>11</td>\n","      <td>25</td>\n","      <td>88</td>\n","      <td>64</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>56</td>\n","      <td>0</td>\n","      <td>96</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>-4</td>\n","      <td>40</td>\n","      <td>44</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>53</td>\n","      <td>9</td>\n","      <td>79</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>-2</td>\n","      <td>25</td>\n","      <td>37</td>\n","      <td>12</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>56</td>\n","      <td>0</td>\n","      <td>95</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>-3</td>\n","      <td>40</td>\n","      <td>44</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>56</td>\n","      <td>0</td>\n","      <td>78</td>\n","      <td>0</td>\n","      <td>42</td>\n","      <td>-2</td>\n","      <td>22</td>\n","      <td>37</td>\n","      <td>14</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>56</td>\n","      <td>0</td>\n","      <td>77</td>\n","      <td>0</td>\n","      <td>18</td>\n","      <td>-18</td>\n","      <td>22</td>\n","      <td>59</td>\n","      <td>38</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>97</td>\n","      <td>0</td>\n","      <td>46</td>\n","      <td>-2</td>\n","      <td>42</td>\n","      <td>51</td>\n","      <td>8</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>55</td>\n","      <td>0</td>\n","      <td>95</td>\n","      <td>0</td>\n","      <td>44</td>\n","      <td>-12</td>\n","      <td>40</td>\n","      <td>51</td>\n","      <td>12</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>79</td>\n","      <td>0</td>\n","      <td>84</td>\n","      <td>0</td>\n","      <td>-36</td>\n","      <td>-196</td>\n","      <td>4</td>\n","      <td>120</td>\n","      <td>116</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>81</td>\n","      <td>0</td>\n","      <td>84</td>\n","      <td>0</td>\n","      <td>-20</td>\n","      <td>26</td>\n","      <td>3</td>\n","      <td>105</td>\n","      <td>102</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6395fd75-5c40-49a5-a47b-818b9571a175')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6395fd75-5c40-49a5-a47b-818b9571a175 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6395fd75-5c40-49a5-a47b-818b9571a175');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-247fbe0a-15f6-45ae-a30d-f8972e9416a1\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-247fbe0a-15f6-45ae-a30d-f8972e9416a1')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-247fbe0a-15f6-45ae-a30d-f8972e9416a1 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df[df[target] == 1]\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"feature1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 53,\n        \"max\": 81,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          56,\n          81,\n          53\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 0,\n        \"max\": 9,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          9,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 77,\n        \"max\": 97,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          96,\n          77\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": -36,\n        \"max\": 52,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62,\n        \"min\": -196,\n        \"max\": 26,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 3,\n        \"max\": 42,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 29,\n        \"min\": 37,\n        \"max\": 120,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 42,\n        \"min\": 4,\n        \"max\": 116,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anomaly\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 1,\n        \"max\": 1,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}]},{"cell_type":"code","source":["df_reduced = df.sample(frac=0.15, random_state=42)\n","\n","print(df_reduced.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-oU34dkNqh5B","executionInfo":{"status":"ok","timestamp":1761920882521,"user_tz":-480,"elapsed":54,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"ec40e495-efe8-43b3-8d48-872be38f7fb6"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["(8700, 10)\n"]}]},{"cell_type":"code","source":["df_reduced.head(1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"wrF3WyS6qpXp","executionInfo":{"status":"ok","timestamp":1761920943559,"user_tz":-480,"elapsed":76,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"cfd5dc91-81ba-4163-9671-7a754e0cf857"},"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       feature1  feature2  feature3  feature4  feature5  feature6  feature7  \\\n","40951        50         3       106         0        50         0        57   \n","\n","       feature8  feature9  anomaly  \n","40951        57         0        0  "],"text/html":["\n","  <div id=\"df-49c183c3-adc9-4a0a-ae73-91233173bb81\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>feature1</th>\n","      <th>feature2</th>\n","      <th>feature3</th>\n","      <th>feature4</th>\n","      <th>feature5</th>\n","      <th>feature6</th>\n","      <th>feature7</th>\n","      <th>feature8</th>\n","      <th>feature9</th>\n","      <th>anomaly</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>40951</th>\n","      <td>50</td>\n","      <td>3</td>\n","      <td>106</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>0</td>\n","      <td>57</td>\n","      <td>57</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-49c183c3-adc9-4a0a-ae73-91233173bb81')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-49c183c3-adc9-4a0a-ae73-91233173bb81 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-49c183c3-adc9-4a0a-ae73-91233173bb81');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_reduced","summary":"{\n  \"name\": \"df_reduced\",\n  \"rows\": 8700,\n  \"fields\": [\n    {\n      \"column\": \"feature1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12,\n        \"min\": 36,\n        \"max\": 123,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          50,\n          55,\n          77\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62,\n        \"min\": -1521,\n        \"max\": 4692,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          11,\n          3,\n          -26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 71,\n        \"max\": 113,\n        \"num_unique_values\": 42,\n        \"samples\": [\n          75,\n          95,\n          77\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": -587,\n        \"max\": 108,\n        \"num_unique_values\": 49,\n        \"samples\": [\n          8,\n          108,\n          24\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": -46,\n        \"max\": 72,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          28,\n          -30,\n          -6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 103,\n        \"min\": -2377,\n        \"max\": 7973,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          49,\n          31,\n          -15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 13,\n        \"min\": -43,\n        \"max\": 73,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          34,\n          57,\n          69\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 22,\n        \"max\": 130,\n        \"num_unique_values\": 108,\n        \"samples\": [\n          125,\n          48,\n          37\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 0,\n        \"max\": 126,\n        \"num_unique_values\": 64,\n        \"samples\": [\n          92,\n          44,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anomaly\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"code","source":["anom_count = (df_reduced[target] == 1).sum()\n","normal_count = (df_reduced[target] == 0).sum()\n","\n","print(\"Number of anomalies:\", anom_count)\n","print(\"Number of normals:\", normal_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wpk2zK8RrANT","executionInfo":{"status":"ok","timestamp":1761920953686,"user_tz":-480,"elapsed":59,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"376474e9-29d6-4230-81e0-ff33a2897b10"},"execution_count":38,"outputs":[{"output_type":"stream","name":"stdout","text":["Number of anomalies: 1803\n","Number of normals: 6897\n"]}]},{"cell_type":"code","source":["#Proportion of attacks in network traffic\n","plt.figure(figsize = (10, 6))\n","target_count = df_reduced[target].value_counts()\n","plt.figure(figsize = (12, 8))\n","plt.pie(target_count, labels = ['No', 'Yes'], autopct=\"%0.1f%%\")\n","plt.title('Is Anomaly')\n","plt.show()\n","#Conclusion: Imbalanced dataset"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":692},"id":"PaXUo0KjrCsR","executionInfo":{"status":"ok","timestamp":1761920971385,"user_tz":-480,"elapsed":292,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"0a48e4d4-8f38-414e-f1a9-33aee1a4a033"},"execution_count":39,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 0 Axes>"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# See how many missing values per column\n","df_reduced.isna().sum()\n","\n","# Or total missing values in the entire dataframe\n","total_nans = df_reduced.isna().sum().sum()\n","print(f\"Total NaN values: {total_nans:,}\")\n","\n","# To quickly view which columns have missing data\n","nan_cols = df_reduced.columns[df.isna().any()].tolist()\n","print(\"Columns with NaNs:\", nan_cols)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJ2yWAzUrG9R","executionInfo":{"status":"ok","timestamp":1761920982081,"user_tz":-480,"elapsed":67,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"4faee5d9-5ce8-41c1-c6c3-4816ddddabff"},"execution_count":40,"outputs":[{"output_type":"stream","name":"stdout","text":["Total NaN values: 0\n","Columns with NaNs: []\n"]}]},{"cell_type":"code","source":["# Check if there are any infinite values\n","inf_mask = df.isin([np.inf, -np.inf])\n","has_inf = inf_mask.any().any()\n","print(f\"Contains infinite values: {has_inf}\")\n","\n","# Count how many per column\n","inf_counts = inf_mask.sum()\n","inf_counts[inf_counts > 0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":102},"id":"HQoP3Z5_rJoA","executionInfo":{"status":"ok","timestamp":1761921018685,"user_tz":-480,"elapsed":20,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"f9eaa070-b59c-433d-b0b3-144e55656dee"},"execution_count":43,"outputs":[{"output_type":"stream","name":"stdout","text":["Contains infinite values: False\n"]},{"output_type":"execute_result","data":{"text/plain":["Series([], dtype: int64)"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":43}]},{"cell_type":"code","source":["# Separate features and label\n","X = df_reduced.drop(columns=[target])\n","y = df_reduced[target]"],"metadata":{"id":"YB8OsL44rMvY","executionInfo":{"status":"ok","timestamp":1761921035477,"user_tz":-480,"elapsed":9,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":44,"outputs":[]},{"cell_type":"code","source":["X_train, X_temp, y_train, y_temp = train_test_split(\n","    X, y, test_size=0.3, stratify=y, random_state=42\n",")\n","\n","# Split temp into validation (15%) and test (15%)\n","X_val, X_test, y_val, y_test = train_test_split(\n","    X_temp, y_temp, test_size=0.5, stratify=y_temp, random_state=42\n",")"],"metadata":{"id":"2qFCjvyBrWrH","executionInfo":{"status":"ok","timestamp":1761921042938,"user_tz":-480,"elapsed":114,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":45,"outputs":[]},{"cell_type":"code","source":["num_cols = X_train.select_dtypes(include=[np.number]).columns\n","\n","scaler = StandardScaler()\n","\n","X_train[num_cols] = scaler.fit_transform(X_train[num_cols])\n","X_val[num_cols] = scaler.transform(X_val[num_cols])\n","X_test[num_cols] = scaler.transform(X_test[num_cols])"],"metadata":{"id":"uVXdAM_IrYdp","executionInfo":{"status":"ok","timestamp":1761921052008,"user_tz":-480,"elapsed":58,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","source":["train_df = pd.concat([X_train, y_train], axis=1)\n","valid_df = pd.concat([X_val, y_val], axis=1)\n","test_df = pd.concat([X_test, y_test], axis=1)"],"metadata":{"id":"HnGxkfBHrasy","executionInfo":{"status":"ok","timestamp":1761921058602,"user_tz":-480,"elapsed":66,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":47,"outputs":[]},{"cell_type":"code","source":["print(f\"Train shape: {train_df.shape}, anomaly ratio={train_df[target].mean():.4%}\")\n","print(f\"Valid shape: {valid_df.shape}, anomaly ratio={valid_df[target].mean():.4%}\")\n","print(f\"Test shape:  {test_df.shape},  anomaly ratio={test_df[target].mean():.4%}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"51AwwxRsrcTh","executionInfo":{"status":"ok","timestamp":1761921065750,"user_tz":-480,"elapsed":88,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"a52b44ca-8f4a-42f5-b3e9-0049ede72d4e"},"execution_count":48,"outputs":[{"output_type":"stream","name":"stdout","text":["Train shape: (6090, 10), anomaly ratio=20.7225%\n","Valid shape: (1305, 10), anomaly ratio=20.7663%\n","Test shape:  (1305, 10),  anomaly ratio=20.6897%\n"]}]},{"cell_type":"code","source":["import os\n","\n","# Create the folder path (it won't exist by default)\n","save_dir = \"/content/drive/MyDrive/datasets/aerospace_shuttle\"\n","\n","# Make sure the directory exists\n","os.makedirs(save_dir, exist_ok=True)\n","\n","# Now safely save your splits\n","train_df.to_csv(f\"{save_dir}/train.csv\", index=False)\n","valid_df.to_csv(f\"{save_dir}/val.csv\", index=False)\n","test_df.to_csv(f\"{save_dir}/test.csv\", index=False)\n","\n","print(\"Files saved in:\", save_dir)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tqrKmEiYreCy","executionInfo":{"status":"ok","timestamp":1761921093958,"user_tz":-480,"elapsed":573,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"c00ece13-b234-4206-ce0c-3c0382835117"},"execution_count":49,"outputs":[{"output_type":"stream","name":"stdout","text":["Files saved in: /content/drive/MyDrive/datasets/aerospace_shuttle\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"XapV5p3Rrkzq"},"execution_count":null,"outputs":[]}]}