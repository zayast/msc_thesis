{"cells":[{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1760889073387,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"QYO-HYkgZ4T3"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from torch.utils.data import DataLoader, TensorDataset\n","from torch.optim import Adam\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"VdpcwaM9z4TN","executionInfo":{"status":"ok","timestamp":1760889073399,"user_tz":-480,"elapsed":4,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report\n","from sklearn.metrics import roc_auc_score, precision_recall_curve, f1_score"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2579,"status":"ok","timestamp":1760889077010,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"7lEomYw8aQbh","outputId":"b11c173a-e0df-4d64-ca27-c1c6f6ae9074"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"5Q9MHkvXys9q"},"source":["=====================Data prepration============================="]},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1760889077015,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"JEb6Fm_HcbCy"},"outputs":[],"source":["# -----------------\n","# Helper: stratified sampling\n","# -----------------\n","def stratified_sample(df, target_col, frac=None, n=None, random_state=42):\n","    \"\"\"Return stratified sample keeping target ratio\"\"\"\n","    if frac is not None:\n","        df_sampled = df.groupby(target_col, group_keys=False)\\\n","                       .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n","    elif n is not None:\n","        class_counts = df[target_col].value_counts()\n","        total = class_counts.sum()\n","        df_sampled = []\n","        for c, count in class_counts.items():\n","            take = int(n * (count / total))\n","            df_sampled.append(df[df[target_col] == c].sample(n=take, random_state=random_state))\n","        df_sampled = pd.concat(df_sampled)\n","    else:\n","        df_sampled = df\n","    return df_sampled.sample(frac=1.0, random_state=random_state).reset_index(drop=True)"]},{"cell_type":"code","source":["dataset = \"B\"\n","\n","if dataset == \"A\":\n","  dataset_name = \"/content/drive/MyDrive/wustl_iiot_2021.csv\"\n","  target = 'Target'\n","  drop_cols = [\"StartTime\", \"LastTime\", \"Traffic\", \"SrcAddr\", \"DstAddr\"]\n","  frac=0.1\n","elif dataset == \"B\":\n","  dataset_name = \"/content/drive/MyDrive/creditcard.csv\"\n","  target = 'Class'\n","  drop_cols = [\"Time\"]\n","  frac=0.5"],"metadata":{"id":"zNLyODO3h4nL","executionInfo":{"status":"ok","timestamp":1760889083270,"user_tz":-480,"elapsed":3,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6663,"status":"ok","timestamp":1760889093748,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"tqQUooD0aAPH","outputId":"5ff84525-dfd7-43b3-bff3-5f5618dfcc00"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original dataset shape: (284807, 30), anomaly ratio=0.1727%\n","Sampled dataset shape: (142404, 30), anomaly ratio=0.1727%\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2184620091.py:8: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n"]},{"output_type":"stream","name":"stdout","text":["Train shape: (75948, 30), anomaly ratio=0.1725%\n","Valid shape: (37975, 30), anomaly ratio=0.1738%\n","Test shape:  (28481, 30),  anomaly ratio=0.1720%\n","['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\n","Categorical columns: []\n","Numerical columns: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\n","[]\n","[]\n"]}],"source":["df = pd.read_csv(dataset_name)\n","\n","df = df.drop(columns=[c for c in drop_cols if c in df.columns])\n","\n","print(f\"Original dataset shape: {df.shape}, anomaly ratio={df[target].mean():.4%}\")\n","\n","# Stratified sampling\n","df_sampled = stratified_sample(df, target, frac=frac, random_state=0)\n","print(f\"Sampled dataset shape: {df_sampled.shape}, anomaly ratio={df_sampled[target].mean():.4%}\")\n","\n","df_sampled = df_sampled.reset_index(drop=True)\n","\n","features = df_sampled.columns\n","\n","train_df, test_df = train_test_split(\n","    df_sampled, test_size=0.2, stratify=df_sampled[target], random_state=0\n",")\n","\n","train_df, valid_df = train_test_split(\n","    train_df, test_size= 0.2 / 0.6, stratify=train_df[target], random_state=0\n",")\n","\n","print(f\"Train shape: {train_df.shape}, anomaly ratio={train_df[target].mean():.4%}\")\n","print(f\"Valid shape: {valid_df.shape}, anomaly ratio={valid_df[target].mean():.4%}\")\n","print(f\"Test shape:  {test_df.shape},  anomaly ratio={test_df[target].mean():.4%}\")\n","\n","# Add the \"Set\" column\n","train_df[\"Set\"] = \"train\"\n","valid_df[\"Set\"] = \"valid\"\n","test_df[\"Set\"] = \"test\"\n","\n","# Combine them back together\n","train = pd.concat([train_df, valid_df, test_df]).reset_index(drop=True)\n","\n","train_indices = train[train.Set == \"train\"].index\n","valid_indices = train[train.Set == \"valid\"].index\n","test_indices = train[train.Set == \"test\"].index\n","\n","\n","categorical_columns = []\n","numerical_columns = []\n","categorical_dims = {}\n","\n","nunique = train.nunique()\n","types = train.dtypes\n","\n","for col in train.columns:\n","    if col == target or col == 'Set':\n","        continue\n","    if types[col] == 'object':\n","        l_enc = LabelEncoder()\n","        train[col] = train[col].fillna(\"VV_likely\")\n","        train[col] = l_enc.fit_transform(train[col].values)\n","        categorical_columns.append(col)\n","        categorical_dims[col] = len(l_enc.classes_)\n","    else:\n","        train.fillna(train.loc[train_indices, col].mean(), inplace=True)\n","        numerical_columns.append(col)\n","\n","unused_feat = [\"Set\"]\n","\n","features = [col for col in df_sampled.columns if col not in unused_feat + [target]]\n","\n","print(features)\n","print(\"Categorical columns:\", categorical_columns)\n","print(\"Numerical columns:\", numerical_columns)\n","\n","cat_idxs = [i for i, f in enumerate(features) if f in categorical_columns]\n","\n","print(cat_idxs)\n","cat_dims = [categorical_dims[f] for i, f in enumerate(features) if f in categorical_columns]\n","print(cat_dims)"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1760889096616,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"c-yxDUQHxt6F"},"outputs":[],"source":["target_enc = LabelEncoder()\n","train[target] = target_enc.fit_transform(train[target].values)"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760889098246,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"oXFTqW5IblTA"},"outputs":[],"source":["X_train = train[features].values[train_indices]\n","y_train = train[target].values[train_indices]\n","\n","X_valid = train[features].values[valid_indices]\n","y_valid = train[target].values[valid_indices]\n","\n","X_test = train[features].values[test_indices]\n","y_test = train[target].values[test_indices]"]},{"cell_type":"code","source":["X_train[:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lrzMwFTWTTB8","executionInfo":{"status":"ok","timestamp":1760889100112,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"e1fc40de-ebd1-4173-f471-5236be93ccd1"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1.19197911e+00,  3.65650122e-01, -8.51445584e-01,\n","        -5.55876464e-02,  6.60455094e-01, -8.97987761e-01,\n","         9.17589518e-01, -1.09320231e+00, -3.04718385e-03,\n","        -3.14985028e-01,  1.37842811e+00,  5.80745705e-01,\n","         4.10150716e-02, -7.67188541e-01,  1.12237566e-01,\n","         2.29330820e-01,  2.57217208e-01,  1.05117226e+00,\n","         7.67926875e-02, -6.39738004e-01,  9.28457312e-01,\n","         1.00805213e+00,  5.59219071e-01, -4.87668841e-02,\n","        -1.88406839e-01, -1.33895716e-01,  3.85090717e-01,\n","         1.49271649e-01,  9.90000000e+01],\n","       [-1.10183428e+00,  1.42811407e+00,  1.75677727e+00,\n","         4.57016384e+00, -7.85317014e-01,  1.74108541e+00,\n","         4.60257243e-01,  4.84929055e-01, -7.22077270e-01,\n","         6.13497785e-01, -4.18485976e-01, -3.65065122e+00,\n","         1.53242701e+00,  1.78262993e+00,  7.01455562e-01,\n","         5.11940272e-01,  8.11029639e-01,  1.08387676e+00,\n","         7.74394808e-01,  1.48712822e-01,  1.01479933e-01,\n","         3.42363325e-01, -1.18869258e-01,  6.43704638e-01,\n","         1.74076932e-01,  4.92296165e-01, -9.15912795e-02,\n","        -2.42055297e-02,  2.26440000e+02]])"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["y_train[:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ZaXye2RTUKI","executionInfo":{"status":"ok","timestamp":1760889102591,"user_tz":-480,"elapsed":15,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"c77b1ebd-1af1-49d4-ec3d-396b71d4eb3d"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0])"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":25,"status":"ok","timestamp":1760889104676,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"XEizQZmXgxQm"},"outputs":[],"source":["# Split the data into categorical and continuous parts\n","X_train_categ = torch.tensor(X_train[:, cat_idxs], dtype=torch.long)\n","X_train_cont = torch.tensor(np.delete(X_train, cat_idxs, axis=1), dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train, dtype=torch.long)\n","\n","X_valid_categ = torch.tensor(X_valid[:, cat_idxs], dtype=torch.long)\n","X_valid_cont = torch.tensor(np.delete(X_valid, cat_idxs, axis=1), dtype=torch.float32)\n","y_valid_tensor = torch.tensor(y_valid, dtype=torch.long)\n","\n","X_test_categ = torch.tensor(X_test[:, cat_idxs], dtype=torch.long)\n","X_test_cont = torch.tensor(np.delete(X_test, cat_idxs, axis=1), dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n","\n","# Create DataLoaders\n","train_dataset = TensorDataset(X_train_categ, X_train_cont, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","valid_dataset = TensorDataset(X_valid_categ, X_valid_cont, y_valid_tensor)\n","valid_loader = DataLoader(valid_dataset, batch_size=32, shuffle=False)\n","\n","test_dataset = TensorDataset(X_test_categ, X_test_cont, y_test_tensor)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"]},{"cell_type":"markdown","metadata":{"id":"6t0AMSr8y2Pe"},"source":["======================================================================"]},{"cell_type":"markdown","metadata":{"id":"Lbv9mESCyQNX"},"source":["==================================Model================================"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760889106012,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"t9qv3vmlzpQx"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","\n","from einops import rearrange"]},{"cell_type":"code","execution_count":45,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760890029274,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"5UmJ2xwyy-AA"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","from einops import rearrange, repeat\n","\n","# -------------------------\n","# Feedforward\n","# -------------------------\n","\n","class GEGLU(nn.Module):\n","    def forward(self, x):\n","        x, gates = x.chunk(2, dim=-1)\n","        return x * F.gelu(gates)\n","\n","def FeedForward(dim, mult=4, dropout=0.):\n","    return nn.Sequential(\n","        nn.LayerNorm(dim),\n","        nn.Linear(dim, dim * mult * 2),\n","        GEGLU(),\n","        nn.Dropout(dropout),\n","        nn.Linear(dim * mult, dim)\n","    )\n","\n","# -------------------------\n","# Sparse Attention (Top-k)\n","# -------------------------\n","\n","class SparseAttention(nn.Module):\n","    def __init__(self, dim, heads=8, dim_head=64, dropout=0., sparse_topk=16):\n","        super().__init__()\n","        inner_dim = dim_head * heads\n","        self.heads = heads\n","        self.scale = dim_head ** -0.5\n","        self.sparse_topk = sparse_topk\n","\n","        self.norm = nn.LayerNorm(dim)\n","        self.to_qkv = nn.Linear(dim, inner_dim * 3, bias=False)\n","        self.to_out = nn.Linear(inner_dim, dim, bias=False)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        h = self.heads\n","        x = self.norm(x)\n","        q, k, v = self.to_qkv(x).chunk(3, dim=-1)\n","        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h=h), (q, k, v))\n","        q = q * self.scale\n","\n","        sim = einsum('b h i d, b h j d -> b h i j', q, k)\n","\n","        # sparse attention: top-k keys per query\n","        if self.sparse_topk is not None and self.sparse_topk < sim.size(-1):\n","            topk_vals, topk_idx = sim.topk(self.sparse_topk, dim=-1)\n","            mask = torch.zeros_like(sim, dtype=torch.bool)\n","            mask.scatter_(-1, topk_idx, True)\n","            sim = sim.masked_fill(~mask, float('-inf'))\n","\n","        attn = sim.softmax(dim=-1)\n","        dropped_attn = self.dropout(attn)\n","\n","        out = einsum('b h i j, b h j d -> b h i d', dropped_attn, v)\n","        out = rearrange(out, 'b h n d -> b n (h d)', h=h)\n","        return self.to_out(out), attn\n","\n","# -------------------------\n","# Transformer Block\n","# -------------------------\n","\n","class Transformer(nn.Module):\n","    def __init__(self, dim, depth, heads, dim_head, attn_dropout, ff_dropout, sparse_topk):\n","        super().__init__()\n","        self.layers = nn.ModuleList([\n","            nn.ModuleList([\n","                SparseAttention(dim, heads=heads, dim_head=dim_head, dropout=attn_dropout, sparse_topk=sparse_topk),\n","                FeedForward(dim, dropout=ff_dropout)\n","            ])\n","            for _ in range(depth)\n","        ])\n","\n","    def forward(self, x, return_attn=False):\n","        attns = []\n","        for attn, ff in self.layers:\n","            attn_out, attn_weights = attn(x)\n","            x = x + attn_out\n","            x = x + ff(x)\n","            attns.append(attn_weights)\n","        return (x, torch.stack(attns)) if return_attn else x\n","\n","# -------------------------\n","# Numerical Embedder\n","# -------------------------\n","\n","class NumericalEmbedder(nn.Module):\n","    def __init__(self, dim, num_features):\n","        super().__init__()\n","        self.weights = nn.Parameter(torch.randn(num_features, dim))\n","        self.biases = nn.Parameter(torch.randn(num_features, dim))\n","\n","    def forward(self, x):\n","        return rearrange(x, 'b n -> b n 1') * self.weights + self.biases\n","\n","# -------------------------\n","# FTTransformer for Tabular Data\n","# -------------------------\n","\n","class FTTransformer(nn.Module):\n","    def __init__(\n","        self,\n","        categories,\n","        num_continuous,\n","        dim,\n","        depth,\n","        heads,\n","        dim_head=16,\n","        dim_out=1,\n","        attn_dropout=0.,\n","        ff_dropout=0.,\n","        sparse_topk=16\n","    ):\n","        super().__init__()\n","        assert all(c > 0 for c in categories), 'Category sizes must be positive'\n","\n","        # embeddings\n","        self.num_categories = len(categories)\n","        self.num_continuous = num_continuous\n","        self.num_unique_categories = sum(categories)\n","\n","        if self.num_categories > 0:\n","            offsets = F.pad(torch.tensor(categories), (1, 0), value=2).cumsum(0)[:-1]\n","            self.register_buffer('categories_offset', offsets)\n","            self.categorical_embeds = nn.Embedding(self.num_unique_categories + 2, dim)\n","\n","        if num_continuous > 0:\n","            self.numerical_embedder = NumericalEmbedder(dim, num_continuous)\n","\n","        # cls token\n","        self.cls_token = nn.Parameter(torch.randn(1, 1, dim))\n","\n","        # transformer\n","        self.transformer = Transformer(\n","            dim=dim,\n","            depth=depth,\n","            heads=heads,\n","            dim_head=dim_head,\n","            attn_dropout=attn_dropout,\n","            ff_dropout=ff_dropout,\n","            sparse_topk=sparse_topk\n","        )\n","\n","        # output\n","        self.to_logits = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.ReLU(),\n","            nn.Linear(dim, dim_out)\n","        )\n","\n","    def forward(self, x_categ, x_numer, return_attn=False):\n","        tokens = []\n","\n","        if self.num_categories > 0:\n","            x_categ = x_categ + self.categories_offset\n","            tokens.append(self.categorical_embeds(x_categ))\n","\n","        if self.num_continuous > 0:\n","            tokens.append(self.numerical_embedder(x_numer))\n","\n","        x = torch.cat(tokens, dim=1)\n","        b = x.size(0)\n","        cls = repeat(self.cls_token, '1 1 d -> b 1 d', b=b)\n","        x = torch.cat([cls, x], dim=1)\n","\n","        x, attns = self.transformer(x, return_attn=True)\n","        logits = self.to_logits(x[:, 0])\n","\n","        return (logits, attns) if return_attn else logits"]},{"cell_type":"markdown","metadata":{"id":"GQbua9hnyb3t"},"source":["======================================================================="]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"],"metadata":{"id":"xw2OxaMb9nHI","executionInfo":{"status":"ok","timestamp":1760890031584,"user_tz":-480,"elapsed":2,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":46,"outputs":[]},{"cell_type":"code","execution_count":47,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1760890109325,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"GP2nhw8Hx73H"},"outputs":[],"source":["# Define TabTransformer model\n","model = FTTransformer(\n","    categories=cat_dims,      # dimensions of categorical columns\n","    num_continuous=len(features) - len(cat_dims), # number of continuous values\n","    dim=32,\n","    dim_out=1,                # binary classification\n","    depth=6,\n","    heads=8,\n","    attn_dropout=0.1,\n","    ff_dropout=0.1,\n","    num_special_tokens = 2,\n","    sparse_topk=8\n",").to(device)"]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import precision_recall_curve, average_precision_score"],"metadata":{"id":"EloRm9Y5u9n0","executionInfo":{"status":"ok","timestamp":1760890112476,"user_tz":-480,"elapsed":10,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":48,"outputs":[]},{"cell_type":"code","source":["def get_best_threshold(y_true, y_probs, metric=\"f1\"):\n","    precision, recall, thresholds = precision_recall_curve(y_true, y_probs)\n","\n","    # Compute F1 for each threshold\n","    f1_scores = 2 * precision * recall / (precision + recall + 1e-8)\n","    auc_pr = average_precision_score(y_true, y_probs)\n","\n","    if metric == \"f1\":\n","        best_idx = np.argmax(f1_scores)\n","        best_score = f1_scores[best_idx]\n","    elif metric == \"precision\":\n","        best_idx = np.argmax(precision)\n","        best_score = precision[best_idx]\n","    elif metric == \"recall\":\n","        best_idx = np.argmax(recall)\n","        best_score = recall[best_idx]\n","    else:\n","        raise ValueError(\"metric must be one of: 'f1', 'precision', or 'recall'\")\n","\n","    best_threshold = thresholds[best_idx] if best_idx < len(thresholds) else 0.5\n","\n","    metrics = {\n","        \"best_metric\": metric,\n","        \"best_score\": best_score,\n","        \"best_threshold\": best_threshold,\n","        \"auc_pr\": auc_pr,\n","        \"precision_curve\": precision,\n","        \"recall_curve\": recall,\n","        \"f1_curve\": f1_scores,\n","        \"thresholds\": thresholds\n","    }\n","\n","    return best_threshold, metrics"],"metadata":{"id":"rakESQqwu-mZ","executionInfo":{"status":"ok","timestamp":1760890114801,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","execution_count":50,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OquETEtzzZ-V","executionInfo":{"status":"ok","timestamp":1760890572551,"user_tz":-480,"elapsed":447613,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"b6901f7e-a1ba-42bc-c409-599a7627cd62"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Epoch 1/10\n","Train Loss: 0.3652 | Val Loss: 0.7337 | Val Acc: 0.9990 | Val AUC-PR: 0.6643 | Best F1: 0.7132 | Best Thresh: 0.9882\n","\n","Epoch 2/10\n","Train Loss: 0.3276 | Val Loss: 0.3845 | Val Acc: 0.9992 | Val AUC-PR: 0.6113 | Best F1: 0.7603 | Best Thresh: 0.9960\n","\n","Epoch 3/10\n","Train Loss: 0.2890 | Val Loss: 0.4254 | Val Acc: 0.9992 | Val AUC-PR: 0.5917 | Best F1: 0.7559 | Best Thresh: 0.9938\n","\n","Epoch 4/10\n","Train Loss: 0.2588 | Val Loss: 0.5938 | Val Acc: 0.9990 | Val AUC-PR: 0.4416 | Best F1: 0.7176 | Best Thresh: 0.9915\n","\n","Epoch 5/10\n","Train Loss: 0.2852 | Val Loss: 0.4601 | Val Acc: 0.9990 | Val AUC-PR: 0.6576 | Best F1: 0.7111 | Best Thresh: 0.9930\n","\n","Epoch 6/10\n","Train Loss: 0.2279 | Val Loss: 0.2899 | Val Acc: 0.9988 | Val AUC-PR: 0.6346 | Best F1: 0.6944 | Best Thresh: 0.7807\n","\n","Epoch 7/10\n","Train Loss: 0.2169 | Val Loss: 0.2723 | Val Acc: 0.9988 | Val AUC-PR: 0.6419 | Best F1: 0.6901 | Best Thresh: 0.9952\n","\n","Epoch 8/10\n","Train Loss: 0.2015 | Val Loss: 0.2944 | Val Acc: 0.9985 | Val AUC-PR: 0.6191 | Best F1: 0.6216 | Best Thresh: 0.9933\n","\n","Epoch 9/10\n","Train Loss: 0.2499 | Val Loss: 0.3871 | Val Acc: 0.9986 | Val AUC-PR: 0.3938 | Best F1: 0.5424 | Best Thresh: 0.9929\n","\n","Epoch 10/10\n","Train Loss: 0.2341 | Val Loss: 0.2614 | Val Acc: 0.9987 | Val AUC-PR: 0.6545 | Best F1: 0.6525 | Best Thresh: 0.9929\n"]}],"source":["optimizer = Adam(model.parameters(), lr=1e-3)\n","\n","classes = np.unique(y_train)\n","class_weights = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)\n","class_weights = torch.tensor(class_weights, dtype=torch.float).to(device)\n","\n","criterion = nn.BCEWithLogitsLoss(pos_weight=class_weights[1])  # weight the minority class\n","\n","\n","num_epochs = 10\n","best_threshold = 0.5  # initialize\n","best_f1 = 0\n","\n","\n","for epoch in range(num_epochs):\n","    print(f\"\\nEpoch {epoch+1}/{num_epochs}\")\n","    model.train()\n","    train_loss = 0.0\n","\n","    for x_categ, x_cont, y in train_loader:\n","        x_categ = x_categ.to(device)\n","        x_cont = x_cont.to(device)\n","        y = y.to(device).float().unsqueeze(1)  # float and shape (batch,1)\n","\n","        optimizer.zero_grad()\n","        preds = model(x_categ, x_cont)         # shape (batch,1)\n","        loss = criterion(preds, y)             # BCEWithLogitsLoss\n","        loss.backward()\n","        optimizer.step()\n","        train_loss += loss.item()\n","\n","    avg_train_loss = train_loss / len(train_loader)\n","\n","    # validation\n","    model.eval()\n","    val_loss = 0.0\n","    all_val_probs = []\n","    all_val_labels = []\n","\n","    with torch.no_grad():\n","        for x_categ, x_cont, y in valid_loader:\n","            x_categ = x_categ.to(device)\n","            x_cont = x_cont.to(device)\n","            y = y.to(device).float().unsqueeze(1)\n","\n","            preds = model(x_categ, x_cont)      # (batch,1)\n","            loss = criterion(preds, y)\n","            val_loss += loss.item()\n","\n","            probs = torch.sigmoid(preds).cpu().numpy().squeeze(1)\n","            all_val_probs.extend(probs)\n","            all_val_labels.extend(y.cpu().numpy().astype(int).squeeze(1).tolist())\n","\n","    avg_val_loss = val_loss / len(valid_loader)\n","\n","    # ---------- Find Best Threshold (Dynamic) ----------\n","    best_threshold, metrics = get_best_threshold(all_val_labels, all_val_probs, metric=\"f1\")\n","\n","    preds_bin = (np.array(all_val_probs) >= best_threshold).astype(int)\n","    val_acc = accuracy_score(all_val_labels, preds_bin)\n","\n","    print(f\"Train Loss: {avg_train_loss:.4f} | Val Loss: {avg_val_loss:.4f} \"\n","          f\"| Val Acc: {val_acc:.4f} | Val AUC-PR: {metrics['auc_pr']:.4f} \"\n","          f\"| Best {metrics['best_metric'].upper()}: {metrics['best_score']:.4f} \"\n","          f\"| Best Thresh: {best_threshold:.4f}\")"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"0_u9H5FB55j0","executionInfo":{"status":"ok","timestamp":1760890613103,"user_tz":-480,"elapsed":5015,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["# 5️⃣ Final test evaluation\n","model.eval()\n","all_test_preds = []\n","\n","with torch.no_grad():\n","    for x_categ, x_cont, _ in test_loader:\n","        x_categ = x_categ.to(device)\n","        x_cont = x_cont.to(device)\n","\n","        preds = model(x_categ, x_cont)\n","        probs = torch.sigmoid(preds).cpu().numpy().squeeze(1)\n","        all_test_preds.extend((probs >= best_threshold).astype(int))\n","\n","y_pred = np.array(all_test_preds)"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"zGZ9KqXK0AiS","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1760890635688,"user_tz":-480,"elapsed":191,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"cbb9a8c3-d9a3-417c-ac67-d024b8bc202c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Confusion Matrix\n","cm = confusion_matrix(y_test, y_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n","disp.plot(cmap=plt.cm.Blues)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"]},{"cell_type":"code","source":["# Accuracy, Precision, Recall, F1-Score\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","auc = roc_auc_score(y_test, y_pred)\n","\n","\n","# Print individual scores\n","print(f\"Accuracy: {accuracy:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Recall: {recall:.4f}\")\n","print(f\"F1-Score: {f1:.4f}\")\n","print(f\"ROC-AUC: {auc:.4f}\")\n","\n","# Classification report for a detailed overview\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhO2p17A9x-K","executionInfo":{"status":"ok","timestamp":1760890639989,"user_tz":-480,"elapsed":37,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"a8ddb7b9-0c6d-4e61-98f7-9d56fd0ece0f"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9989\n","Precision: 0.6792\n","Recall: 0.7347\n","F1-Score: 0.7059\n","ROC-AUC: 0.8670\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     28432\n","           1       0.68      0.73      0.71        49\n","\n","    accuracy                           1.00     28481\n","   macro avg       0.84      0.87      0.85     28481\n","weighted avg       1.00      1.00      1.00     28481\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iogJ7zeoAorG"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"A100","authorship_tag":"ABX9TyOU/pTrNNfvyu193DJGE19m"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}