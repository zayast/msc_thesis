{"cells":[{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1760889073387,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"QYO-HYkgZ4T3"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from torch.utils.data import DataLoader, TensorDataset\n","from torch.optim import Adam\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":25,"metadata":{"id":"VdpcwaM9z4TN","executionInfo":{"status":"ok","timestamp":1760889073399,"user_tz":-480,"elapsed":4,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report\n","from sklearn.metrics import roc_auc_score, precision_recall_curve, f1_score"]},{"cell_type":"code","execution_count":26,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2579,"status":"ok","timestamp":1760889077010,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"7lEomYw8aQbh","outputId":"b11c173a-e0df-4d64-ca27-c1c6f6ae9074"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"5Q9MHkvXys9q"},"source":["=====================Data prepration============================="]},{"cell_type":"code","execution_count":27,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1760889077015,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"JEb6Fm_HcbCy"},"outputs":[],"source":["# -----------------\n","# Helper: stratified sampling\n","# -----------------\n","def stratified_sample(df, target_col, frac=None, n=None, random_state=42):\n","    \"\"\"Return stratified sample keeping target ratio\"\"\"\n","    if frac is not None:\n","        df_sampled = df.groupby(target_col, group_keys=False)\\\n","                       .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n","    elif n is not None:\n","        class_counts = df[target_col].value_counts()\n","        total = class_counts.sum()\n","        df_sampled = []\n","        for c, count in class_counts.items():\n","            take = int(n * (count / total))\n","            df_sampled.append(df[df[target_col] == c].sample(n=take, random_state=random_state))\n","        df_sampled = pd.concat(df_sampled)\n","    else:\n","        df_sampled = df\n","    return df_sampled.sample(frac=1.0, random_state=random_state).reset_index(drop=True)"]},{"cell_type":"code","source":["dataset = \"B\"\n","\n","if dataset == \"A\":\n","  dataset_name = \"/content/drive/MyDrive/wustl_iiot_2021.csv\"\n","  target = 'Target'\n","  drop_cols = [\"StartTime\", \"LastTime\", \"Traffic\", \"SrcAddr\", \"DstAddr\"]\n","  frac=0.1\n","elif dataset == \"B\":\n","  dataset_name = \"/content/drive/MyDrive/creditcard.csv\"\n","  target = 'Class'\n","  drop_cols = [\"Time\"]\n","  frac=0.5"],"metadata":{"id":"zNLyODO3h4nL","executionInfo":{"status":"ok","timestamp":1760889083270,"user_tz":-480,"elapsed":3,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6663,"status":"ok","timestamp":1760889093748,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"tqQUooD0aAPH","outputId":"5ff84525-dfd7-43b3-bff3-5f5618dfcc00"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original dataset shape: (284807, 30), anomaly ratio=0.1727%\n","Sampled dataset shape: (142404, 30), anomaly ratio=0.1727%\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2184620091.py:8: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n"]},{"output_type":"stream","name":"stdout","text":["Train shape: (75948, 30), anomaly ratio=0.1725%\n","Valid shape: (37975, 30), anomaly ratio=0.1738%\n","Test shape:  (28481, 30),  anomaly ratio=0.1720%\n","['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\n","Categorical columns: []\n","Numerical columns: ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\n","[]\n","[]\n"]}],"source":["df = pd.read_csv(dataset_name)\n","\n","df = df.drop(columns=[c for c in drop_cols if c in df.columns])\n","\n","print(f\"Original dataset shape: {df.shape}, anomaly ratio={df[target].mean():.4%}\")\n","\n","# Stratified sampling\n","df_sampled = stratified_sample(df, target, frac=frac, random_state=0)\n","print(f\"Sampled dataset shape: {df_sampled.shape}, anomaly ratio={df_sampled[target].mean():.4%}\")\n","\n","df_sampled = df_sampled.reset_index(drop=True)\n","\n","features = df_sampled.columns\n","\n","train_df, test_df = train_test_split(\n","    df_sampled, test_size=0.2, stratify=df_sampled[target], random_state=0\n",")\n","\n","train_df, valid_df = train_test_split(\n","    train_df, test_size= 0.2 / 0.6, stratify=train_df[target], random_state=0\n",")\n","\n","print(f\"Train shape: {train_df.shape}, anomaly ratio={train_df[target].mean():.4%}\")\n","print(f\"Valid shape: {valid_df.shape}, anomaly ratio={valid_df[target].mean():.4%}\")\n","print(f\"Test shape:  {test_df.shape},  anomaly ratio={test_df[target].mean():.4%}\")\n","\n","# Add the \"Set\" column\n","train_df[\"Set\"] = \"train\"\n","valid_df[\"Set\"] = \"valid\"\n","test_df[\"Set\"] = \"test\"\n","\n","# Combine them back together\n","train = pd.concat([train_df, valid_df, test_df]).reset_index(drop=True)\n","\n","train_indices = train[train.Set == \"train\"].index\n","valid_indices = train[train.Set == \"valid\"].index\n","test_indices = train[train.Set == \"test\"].index\n","\n","\n","categorical_columns = []\n","numerical_columns = []\n","categorical_dims = {}\n","\n","nunique = train.nunique()\n","types = train.dtypes\n","\n","for col in train.columns:\n","    if col == target or col == 'Set':\n","        continue\n","    if types[col] == 'object':\n","        l_enc = LabelEncoder()\n","        train[col] = train[col].fillna(\"VV_likely\")\n","        train[col] = l_enc.fit_transform(train[col].values)\n","        categorical_columns.append(col)\n","        categorical_dims[col] = len(l_enc.classes_)\n","    else:\n","        train.fillna(train.loc[train_indices, col].mean(), inplace=True)\n","        numerical_columns.append(col)\n","\n","unused_feat = [\"Set\"]\n","\n","features = [col for col in df_sampled.columns if col not in unused_feat + [target]]\n","\n","print(features)\n","print(\"Categorical columns:\", categorical_columns)\n","print(\"Numerical columns:\", numerical_columns)\n","\n","cat_idxs = [i for i, f in enumerate(features) if f in categorical_columns]\n","\n","print(cat_idxs)\n","cat_dims = [categorical_dims[f] for i, f in enumerate(features) if f in categorical_columns]\n","print(cat_dims)"]},{"cell_type":"code","execution_count":30,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1760889096616,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"c-yxDUQHxt6F"},"outputs":[],"source":["target_enc = LabelEncoder()\n","train[target] = target_enc.fit_transform(train[target].values)"]},{"cell_type":"code","execution_count":31,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760889098246,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"oXFTqW5IblTA"},"outputs":[],"source":["X_train = train[features].values[train_indices]\n","y_train = train[target].values[train_indices]\n","\n","X_valid = train[features].values[valid_indices]\n","y_valid = train[target].values[valid_indices]\n","\n","X_test = train[features].values[test_indices]\n","y_test = train[target].values[test_indices]"]},{"cell_type":"code","source":["X_train[:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lrzMwFTWTTB8","executionInfo":{"status":"ok","timestamp":1760889100112,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"e1fc40de-ebd1-4173-f471-5236be93ccd1"},"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-1.19197911e+00,  3.65650122e-01, -8.51445584e-01,\n","        -5.55876464e-02,  6.60455094e-01, -8.97987761e-01,\n","         9.17589518e-01, -1.09320231e+00, -3.04718385e-03,\n","        -3.14985028e-01,  1.37842811e+00,  5.80745705e-01,\n","         4.10150716e-02, -7.67188541e-01,  1.12237566e-01,\n","         2.29330820e-01,  2.57217208e-01,  1.05117226e+00,\n","         7.67926875e-02, -6.39738004e-01,  9.28457312e-01,\n","         1.00805213e+00,  5.59219071e-01, -4.87668841e-02,\n","        -1.88406839e-01, -1.33895716e-01,  3.85090717e-01,\n","         1.49271649e-01,  9.90000000e+01],\n","       [-1.10183428e+00,  1.42811407e+00,  1.75677727e+00,\n","         4.57016384e+00, -7.85317014e-01,  1.74108541e+00,\n","         4.60257243e-01,  4.84929055e-01, -7.22077270e-01,\n","         6.13497785e-01, -4.18485976e-01, -3.65065122e+00,\n","         1.53242701e+00,  1.78262993e+00,  7.01455562e-01,\n","         5.11940272e-01,  8.11029639e-01,  1.08387676e+00,\n","         7.74394808e-01,  1.48712822e-01,  1.01479933e-01,\n","         3.42363325e-01, -1.18869258e-01,  6.43704638e-01,\n","         1.74076932e-01,  4.92296165e-01, -9.15912795e-02,\n","        -2.42055297e-02,  2.26440000e+02]])"]},"metadata":{},"execution_count":32}]},{"cell_type":"code","source":["y_train[:2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6ZaXye2RTUKI","executionInfo":{"status":"ok","timestamp":1760889102591,"user_tz":-480,"elapsed":15,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"c77b1ebd-1af1-49d4-ec3d-396b71d4eb3d"},"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0, 0])"]},"metadata":{},"execution_count":33}]},{"cell_type":"code","execution_count":34,"metadata":{"executionInfo":{"elapsed":25,"status":"ok","timestamp":1760889104676,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"XEizQZmXgxQm"},"outputs":[],"source":["# Split the data into categorical and continuous parts\n","X_train_categ = torch.tensor(X_train[:, cat_idxs], dtype=torch.long)\n","X_train_cont = torch.tensor(np.delete(X_train, cat_idxs, axis=1), dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train, dtype=torch.long)\n","\n","X_valid_categ = torch.tensor(X_valid[:, cat_idxs], dtype=torch.long)\n","X_valid_cont = torch.tensor(np.delete(X_valid, cat_idxs, axis=1), dtype=torch.float32)\n","y_valid_tensor = torch.tensor(y_valid, dtype=torch.long)\n","\n","X_test_categ = torch.tensor(X_test[:, cat_idxs], dtype=torch.long)\n","X_test_cont = torch.tensor(np.delete(X_test, cat_idxs, axis=1), dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n","\n","# Create DataLoaders\n","train_dataset = TensorDataset(X_train_categ, X_train_cont, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","valid_dataset = TensorDataset(X_valid_categ, X_valid_cont, y_valid_tensor)\n","valid_loader = DataLoader(valid_dataset, batch_size=32, shuffle=False)\n","\n","test_dataset = TensorDataset(X_test_categ, X_test_cont, y_test_tensor)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"]},{"cell_type":"markdown","metadata":{"id":"6t0AMSr8y2Pe"},"source":["======================================================================"]},{"cell_type":"markdown","metadata":{"id":"Lbv9mESCyQNX"},"source":["==================================Model================================"]},{"cell_type":"code","execution_count":35,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760889106012,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"t9qv3vmlzpQx"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","\n","from einops import rearrange"]},{"cell_type":"code","execution_count":69,"metadata":{"executionInfo":{"elapsed":31,"status":"ok","timestamp":1760891703643,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"5UmJ2xwyy-AA"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","from einops import rearrange, repeat\n","\n","# ---------- Helper: GEGLU Feedforward ----------\n","\n","class GEGLU(nn.Module):\n","    def forward(self, x):\n","        x, gates = x.chunk(2, dim=-1)\n","        return x * F.gelu(gates)\n","\n","def FeedForward(dim, mult=4, dropout=0.):\n","    return nn.Sequential(\n","        nn.LayerNorm(dim),\n","        nn.Linear(dim, dim * mult * 2),\n","        GEGLU(),\n","        nn.Dropout(dropout),\n","        nn.Linear(dim * mult, dim)\n","    )\n","\n","# ---------- SwitchHead (Mixture-of-Experts) Attention ----------\n","\n","class SwitchHeadAttention(nn.Module):\n","    def __init__(self, dim, num_experts=4, heads=8, dim_head=64, top_k=2, dropout=0.1):\n","        super().__init__()\n","        self.num_experts = num_experts\n","        self.heads = heads\n","        self.dim_head = dim_head\n","        self.scale = dim_head ** -0.5\n","        self.top_k = top_k\n","\n","        inner_dim = heads * dim_head\n","        self.norm = nn.LayerNorm(dim)\n","\n","        # Expert-specific linear layers\n","        self.qkv = nn.ModuleList([\n","            nn.Linear(dim, inner_dim * 3, bias=False) for _ in range(num_experts)\n","        ])\n","        self.outs = nn.ModuleList([\n","            nn.Linear(inner_dim, dim, bias=False) for _ in range(num_experts)\n","        ])\n","\n","        # Router network (assigns tokens to experts)\n","        self.router = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.Linear(dim, num_experts)\n","        )\n","\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        b, n, _ = x.shape\n","        x_norm = self.norm(x)\n","\n","        # Compute routing probabilities\n","        routing_logits = self.router(x_norm)                      # [b, n, num_experts]\n","        routing_probs = F.softmax(routing_logits, dim=-1)\n","\n","        # Top-k experts per token\n","        topk_vals, topk_idx = torch.topk(routing_probs, self.top_k, dim=-1)\n","        topk_vals = topk_vals / (topk_vals.sum(dim=-1, keepdim=True) + 1e-8)\n","\n","        expert_outputs = torch.zeros_like(x)\n","        all_attn_weights = []\n","\n","        for e_idx in range(self.num_experts):\n","            mask = (topk_idx == e_idx).any(dim=-1)\n","            if not mask.any():\n","                continue\n","\n","            qkv = self.qkv[e_idx](x_norm)\n","            q, k, v = qkv.chunk(3, dim=-1)\n","            q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h=self.heads), (q, k, v))\n","            q = q * self.scale\n","\n","            sim = einsum('b h i d, b h j d -> b h i j', q, k)\n","            attn = sim.softmax(dim=-1)\n","            attn = self.dropout(attn)\n","\n","            out = einsum('b h i j, b h j d -> b h i d', attn, v)\n","            out = rearrange(out, 'b h n d -> b n (h d)')\n","            out = self.outs[e_idx](out)\n","            all_attn_weights.append(attn)\n","\n","            expert_outputs += out * routing_probs[..., e_idx].unsqueeze(-1)\n","\n","        # Average attention maps across experts\n","        final_attn = torch.stack(all_attn_weights).mean(0) if all_attn_weights else None\n","\n","        # Load balancing loss (to avoid expert collapse)\n","        expert_usage = routing_probs.mean(dim=(0, 1))  # average over batch and tokens\n","        balance_loss = (expert_usage * torch.log(expert_usage * self.num_experts + 1e-9)).sum()\n","\n","        return expert_outputs, final_attn, routing_probs, balance_loss\n","\n","\n","# ---------- Transformer Layer (with SwitchHead Attention) ----------\n","\n","class Transformer(nn.Module):\n","    def __init__(self, dim, depth, heads, dim_head, attn_dropout, ff_dropout,\n","                 num_experts=4, top_k=2):\n","        super().__init__()\n","        self.layers = nn.ModuleList([])\n","        for _ in range(depth):\n","            self.layers.append(nn.ModuleList([\n","                SwitchHeadAttention(\n","                    dim, num_experts=num_experts, heads=heads,\n","                    dim_head=dim_head, top_k=top_k, dropout=attn_dropout\n","                ),\n","                FeedForward(dim, dropout=ff_dropout),\n","            ]))\n","\n","    def forward(self, x, return_attn=False):\n","        all_attn = []\n","        all_routing = []\n","        balance_losses = []\n","\n","        for attn, ff in self.layers:\n","            attn_out, attn_map, routing_probs, balance_loss = attn(x)\n","            x = x + attn_out\n","            x = x + ff(x)\n","\n","            balance_losses.append(balance_loss)\n","            if return_attn:\n","                all_attn.append(attn_map)\n","                all_routing.append(routing_probs)\n","\n","        total_balance_loss = torch.stack(balance_losses).mean()\n","\n","        if return_attn:\n","            return x, torch.stack(all_attn), torch.stack(all_routing), total_balance_loss\n","        return x, total_balance_loss\n","\n","\n","# ---------- Numerical Embedder ----------\n","\n","class NumericalEmbedder(nn.Module):\n","    def __init__(self, dim, num_numerical_types):\n","        super().__init__()\n","        self.weights = nn.Parameter(torch.randn(num_numerical_types, dim))\n","        self.biases = nn.Parameter(torch.randn(num_numerical_types, dim))\n","\n","    def forward(self, x):\n","        x = rearrange(x, 'b n -> b n 1')\n","        return x * self.weights + self.biases\n","\n","\n","# ---------- Full FTTransformer + SwitchHead ----------\n","\n","class FTTransformerSwitchHead(nn.Module):\n","    def __init__(self, *, categories, num_continuous, dim, depth, heads,\n","                 dim_head=16, dim_out=1, num_special_tokens=2,\n","                 attn_dropout=0., ff_dropout=0.,\n","                 num_experts=4, top_k=2):\n","        super().__init__()\n","        assert all(map(lambda n: n > 0, categories)), \"category sizes must be > 0\"\n","        assert len(categories) + num_continuous > 0, \"input shape cannot be null\"\n","\n","        self.num_categories = len(categories)\n","        self.num_unique_categories = sum(categories)\n","        self.num_special_tokens = num_special_tokens\n","        total_tokens = self.num_unique_categories + num_special_tokens\n","\n","        # categorical embeddings\n","        if self.num_unique_categories > 0:\n","            categories_offset = F.pad(torch.tensor(list(categories)), (1, 0), value=num_special_tokens)\n","            categories_offset = categories_offset.cumsum(dim=-1)[:-1]\n","            self.register_buffer('categories_offset', categories_offset)\n","            self.categorical_embeds = nn.Embedding(total_tokens, dim)\n","\n","        # continuous features\n","        self.num_continuous = num_continuous\n","        if num_continuous > 0:\n","            self.numerical_embedder = NumericalEmbedder(dim, num_continuous)\n","\n","        # cls token\n","        self.cls_token = nn.Parameter(torch.randn(1, 1, dim))\n","\n","        # transformer backbone\n","        self.transformer = Transformer(\n","            dim=dim, depth=depth, heads=heads, dim_head=dim_head,\n","            attn_dropout=attn_dropout, ff_dropout=ff_dropout,\n","            num_experts=num_experts, top_k=top_k\n","        )\n","\n","        # output projection\n","        self.to_logits = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.ReLU(),\n","            nn.Linear(dim, dim_out)\n","        )\n","\n","    def forward(self, x_categ, x_numer, return_attn=False):\n","        xs = []\n","        if self.num_unique_categories > 0:\n","            x_categ = x_categ + self.categories_offset\n","            xs.append(self.categorical_embeds(x_categ))\n","        if self.num_continuous > 0:\n","            xs.append(self.numerical_embedder(x_numer))\n","\n","        x = torch.cat(xs, dim=1)\n","        b = x.shape[0]\n","        cls_token = repeat(self.cls_token, '1 1 d -> b 1 d', b=b)\n","        x = torch.cat((cls_token, x), dim=1)\n","\n","        if return_attn:\n","            x, attns, routing, balance_loss = self.transformer(x, return_attn=True)\n","        else:\n","            x, balance_loss = self.transformer(x)\n","\n","        x_cls = x[:, 0]\n","        logits = self.to_logits(x_cls)\n","\n","        if not return_attn:\n","            return logits, balance_loss\n","        return logits, attns, routing, balance_loss"]},{"cell_type":"markdown","metadata":{"id":"GQbua9hnyb3t"},"source":["======================================================================="]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"],"metadata":{"id":"xw2OxaMb9nHI","executionInfo":{"status":"ok","timestamp":1760891435828,"user_tz":-480,"elapsed":4,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":65,"outputs":[]},{"cell_type":"code","execution_count":70,"metadata":{"executionInfo":{"elapsed":35,"status":"ok","timestamp":1760891718548,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"GP2nhw8Hx73H"},"outputs":[],"source":["model = FTTransformerSwitchHead(\n","    categories=cat_dims,\n","    num_continuous=len(features) - len(cat_dims), # number of continuous values\n","    dim=128,\n","    depth=4,\n","    heads=8,\n","    num_experts=4,\n","    top_k=2,\n","    dim_out=1\n",").to(device)"]},{"cell_type":"code","source":["from sklearn.utils.class_weight import compute_class_weight\n","from sklearn.metrics import precision_recall_curve, average_precision_score"],"metadata":{"id":"EloRm9Y5u9n0","executionInfo":{"status":"ok","timestamp":1760891720903,"user_tz":-480,"elapsed":1,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":71,"outputs":[]},{"cell_type":"code","source":["def get_best_threshold(y_true, y_probs, metric=\"f1\"):\n","    precision, recall, thresholds = precision_recall_curve(y_true, y_probs)\n","\n","    # Compute F1 for each threshold\n","    f1_scores = 2 * precision * recall / (precision + recall + 1e-8)\n","    auc_pr = average_precision_score(y_true, y_probs)\n","\n","    if metric == \"f1\":\n","        best_idx = np.argmax(f1_scores)\n","        best_score = f1_scores[best_idx]\n","    elif metric == \"precision\":\n","        best_idx = np.argmax(precision)\n","        best_score = precision[best_idx]\n","    elif metric == \"recall\":\n","        best_idx = np.argmax(recall)\n","        best_score = recall[best_idx]\n","    else:\n","        raise ValueError(\"metric must be one of: 'f1', 'precision', or 'recall'\")\n","\n","    best_threshold = thresholds[best_idx] if best_idx < len(thresholds) else 0.5\n","\n","    metrics = {\n","        \"best_metric\": metric,\n","        \"best_score\": best_score,\n","        \"best_threshold\": best_threshold,\n","        \"auc_pr\": auc_pr,\n","        \"precision_curve\": precision,\n","        \"recall_curve\": recall,\n","        \"f1_curve\": f1_scores,\n","        \"thresholds\": thresholds\n","    }\n","\n","    return best_threshold, metrics"],"metadata":{"id":"rakESQqwu-mZ","executionInfo":{"status":"ok","timestamp":1760891722366,"user_tz":-480,"elapsed":3,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":72,"outputs":[]},{"cell_type":"code","execution_count":73,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OquETEtzzZ-V","executionInfo":{"status":"ok","timestamp":1760892897689,"user_tz":-480,"elapsed":1039214,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"9fe25271-2c26-45d7-96ec-206dd9bd0a91"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","===== Epoch 1/10 =====\n","Train BCE: 0.4916 | BalanceReg: 0.26207 | Val Loss: 0.5223 | Val Acc: 0.9992 | Val AUC-PR: 0.6000 | Best F1: 0.7458 | Thresh: 0.9101\n","✅ New best model saved (F1=0.7458)\n","\n","===== Epoch 2/10 =====\n","Train BCE: 0.3406 | BalanceReg: 0.19956 | Val Loss: 0.4261 | Val Acc: 0.9989 | Val AUC-PR: 0.6141 | Best F1: 0.6772 | Thresh: 0.8771\n","\n","===== Epoch 3/10 =====\n","Train BCE: 0.2902 | BalanceReg: 0.11198 | Val Loss: 0.5936 | Val Acc: 0.9992 | Val AUC-PR: 0.5738 | Best F1: 0.7333 | Thresh: 0.9963\n","\n","===== Epoch 4/10 =====\n","Train BCE: 0.3506 | BalanceReg: 0.15154 | Val Loss: 0.3115 | Val Acc: 0.9991 | Val AUC-PR: 0.5890 | Best F1: 0.7097 | Thresh: 0.9976\n","\n","===== Epoch 5/10 =====\n","Train BCE: 0.2862 | BalanceReg: 0.15715 | Val Loss: 0.4079 | Val Acc: 0.9991 | Val AUC-PR: 0.5504 | Best F1: 0.7273 | Thresh: 0.9709\n","\n","===== Epoch 6/10 =====\n","Train BCE: 0.3097 | BalanceReg: 0.19318 | Val Loss: 0.2937 | Val Acc: 0.9990 | Val AUC-PR: 0.6060 | Best F1: 0.7176 | Thresh: 0.9713\n","\n","===== Epoch 7/10 =====\n","Train BCE: 0.2681 | BalanceReg: 0.19566 | Val Loss: 0.2906 | Val Acc: 0.9990 | Val AUC-PR: 0.5644 | Best F1: 0.6935 | Thresh: 0.9596\n","\n","===== Epoch 8/10 =====\n","Train BCE: 0.3009 | BalanceReg: 0.21400 | Val Loss: 0.3275 | Val Acc: 0.9989 | Val AUC-PR: 0.4390 | Best F1: 0.6769 | Thresh: 0.9501\n","\n","===== Epoch 9/10 =====\n","Train BCE: 0.3623 | BalanceReg: 0.23467 | Val Loss: 0.4194 | Val Acc: 0.9990 | Val AUC-PR: 0.5244 | Best F1: 0.6935 | Thresh: 0.9905\n","\n","===== Epoch 10/10 =====\n","Train BCE: 0.3217 | BalanceReg: 0.29460 | Val Loss: 0.4816 | Val Acc: 0.9992 | Val AUC-PR: 0.5589 | Best F1: 0.7377 | Thresh: 0.9975\n","\n","Training completed. Best F1 = 0.745762706934789\n"]}],"source":["# === Optimizer and Class Weights ===\n","optimizer = Adam(model.parameters(), lr=1e-3)\n","\n","classes = np.unique(y_train)\n","class_weights = compute_class_weight(class_weight='balanced', classes=classes, y=y_train)\n","class_weights = torch.tensor(class_weights, dtype=torch.float).to(device)\n","\n","criterion = nn.BCEWithLogitsLoss(pos_weight=class_weights[1])\n","\n","# === Training Configuration ===\n","num_epochs = 10\n","lambda_balance = 0.01   # scaling for balance regularization\n","best_threshold = 0.5\n","best_f1 = 0.0\n","\n","for epoch in range(num_epochs):\n","    print(f\"\\n===== Epoch {epoch+1}/{num_epochs} =====\")\n","    model.train()\n","    train_loss = 0.0\n","    balance_reg_loss = 0.0\n","\n","    # ---------- TRAIN LOOP ----------\n","    for x_categ, x_cont, y in train_loader:\n","        x_categ, x_cont, y = x_categ.to(device), x_cont.to(device), y.to(device).float().unsqueeze(1)\n","\n","        optimizer.zero_grad()\n","\n","        # Model forward (returns logits + balance_loss)\n","        logits, balance_loss = model(x_categ, x_cont)\n","\n","        # Combine BCE and balance regularization\n","        bce_loss = criterion(logits, y)\n","        loss = bce_loss + lambda_balance * balance_loss\n","\n","        loss.backward()\n","        optimizer.step()\n","\n","        train_loss += bce_loss.item()\n","        balance_reg_loss += balance_loss.item()\n","\n","    avg_train_loss = train_loss / len(train_loader)\n","    avg_balance_loss = balance_reg_loss / len(train_loader)\n","\n","    # ---------- VALIDATION ----------\n","    model.eval()\n","    val_loss = 0.0\n","    all_val_probs, all_val_labels = [], []\n","\n","    with torch.no_grad():\n","        for x_categ, x_cont, y in valid_loader:\n","            x_categ, x_cont, y = x_categ.to(device), x_cont.to(device), y.to(device).float().unsqueeze(1)\n","\n","            logits, balance_loss = model(x_categ, x_cont)\n","            bce_loss = criterion(logits, y)\n","            val_loss += bce_loss.item()\n","\n","            probs = torch.sigmoid(logits).cpu().numpy().squeeze(1)\n","            all_val_probs.extend(probs)\n","            all_val_labels.extend(y.cpu().numpy().astype(int).squeeze(1).tolist())\n","\n","    avg_val_loss = val_loss / len(valid_loader)\n","\n","    # ---------- Dynamic Threshold Optimization ----------\n","    best_threshold, metrics = get_best_threshold(all_val_labels, all_val_probs, metric=\"f1\")\n","    preds_bin = (np.array(all_val_probs) >= best_threshold).astype(int)\n","    val_acc = accuracy_score(all_val_labels, preds_bin)\n","\n","    # ---------- Logging ----------\n","    print(f\"Train BCE: {avg_train_loss:.4f} | BalanceReg: {avg_balance_loss:.5f} | \"\n","          f\"Val Loss: {avg_val_loss:.4f} | Val Acc: {val_acc:.4f} | \"\n","          f\"Val AUC-PR: {metrics['auc_pr']:.4f} | \"\n","          f\"Best F1: {metrics['best_score']:.4f} | Thresh: {best_threshold:.4f}\")\n","\n","    # Save best model\n","    if metrics[\"best_score\"] > best_f1:\n","        best_f1 = metrics[\"best_score\"]\n","        torch.save(model.state_dict(), \"best_switchhead_ftt.pt\")\n","        print(f\"✅ New best model saved (F1={best_f1:.4f})\")\n","\n","print(\"\\nTraining completed. Best F1 =\", best_f1)"]},{"cell_type":"code","execution_count":75,"metadata":{"id":"0_u9H5FB55j0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1760893226476,"user_tz":-480,"elapsed":11750,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"4991eee9-abd4-4765-a335-ceb58ed90fc6"},"outputs":[{"output_type":"stream","name":"stdout","text":["\n","🔍 Final Test Metrics:\n","Accuracy: 0.9993\n","F1 Score:  0.8000\n","AUC-PR:    0.6162\n","Best Threshold (from val): 0.9975\n"]}],"source":["# 5️⃣ Final test evaluation\n","model.eval()\n","all_test_probs = []\n","all_test_preds = []\n","\n","with torch.no_grad():\n","    for x_categ, x_cont, _ in test_loader:\n","        x_categ, x_cont = x_categ.to(device), x_cont.to(device)\n","\n","        # The model returns (logits, balance_loss)\n","        logits, _ = model(x_categ, x_cont)\n","\n","        # Convert logits → probabilities\n","        probs = torch.sigmoid(logits).cpu().numpy().squeeze(1)\n","        all_test_probs.extend(probs)\n","\n","        # Apply optimal threshold found during validation\n","        preds_bin = (probs >= best_threshold).astype(int)\n","        all_test_preds.extend(preds_bin)\n","\n","# Convert to NumPy arrays\n","y_pred = np.array(all_test_preds)\n","y_prob = np.array(all_test_probs)\n","\n","# Optional: compute test metrics\n","test_acc = accuracy_score(y_test, y_pred)\n","test_f1 = f1_score(y_test, y_pred)\n","test_aucpr = average_precision_score(y_test, y_prob)\n","\n","print(f\"\\n🔍 Final Test Metrics:\")\n","print(f\"Accuracy: {test_acc:.4f}\")\n","print(f\"F1 Score:  {test_f1:.4f}\")\n","print(f\"AUC-PR:    {test_aucpr:.4f}\")\n","print(f\"Best Threshold (from val): {best_threshold:.4f}\")"]},{"cell_type":"code","execution_count":76,"metadata":{"id":"zGZ9KqXK0AiS","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1760893231571,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"4f7356cb-5be3-4fda-db2a-9fd25011cff5"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Confusion Matrix\n","cm = confusion_matrix(y_test, y_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n","disp.plot(cmap=plt.cm.Blues)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"]},{"cell_type":"code","source":["# Accuracy, Precision, Recall, F1-Score\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","auc = roc_auc_score(y_test, y_pred)\n","\n","\n","# Print individual scores\n","print(f\"Accuracy: {accuracy:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Recall: {recall:.4f}\")\n","print(f\"F1-Score: {f1:.4f}\")\n","print(f\"ROC-AUC: {auc:.4f}\")\n","\n","# Classification report for a detailed overview\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhO2p17A9x-K","executionInfo":{"status":"ok","timestamp":1760893235879,"user_tz":-480,"elapsed":30,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"2880a87f-a61b-43b0-a2f5-3552e3278ed5"},"execution_count":77,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9993\n","Precision: 0.8261\n","Recall: 0.7755\n","F1-Score: 0.8000\n","ROC-AUC: 0.8876\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     28432\n","           1       0.83      0.78      0.80        49\n","\n","    accuracy                           1.00     28481\n","   macro avg       0.91      0.89      0.90     28481\n","weighted avg       1.00      1.00      1.00     28481\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"iogJ7zeoAorG"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"A100","authorship_tag":"ABX9TyObnnV39AJTLIafpa1Mg2Mx"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}