{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":8634,"status":"ok","timestamp":1760957119751,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"QYO-HYkgZ4T3"},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.metrics import accuracy_score\n","from torch.utils.data import DataLoader, TensorDataset\n","from torch.optim import Adam\n","from sklearn.model_selection import train_test_split\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"VdpcwaM9z4TN","executionInfo":{"status":"ok","timestamp":1760957119763,"user_tz":-480,"elapsed":5,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"outputs":[],"source":["from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.metrics import precision_score, recall_score, f1_score, classification_report\n","from sklearn.metrics import roc_auc_score, precision_recall_curve, f1_score"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19310,"status":"ok","timestamp":1760957141827,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"7lEomYw8aQbh","outputId":"6e414075-5bce-4195-b45c-486fd606ed15"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"5Q9MHkvXys9q"},"source":["=====================Data prepration============================="]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1760957143076,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"JEb6Fm_HcbCy"},"outputs":[],"source":["# -----------------\n","# Helper: stratified sampling\n","# -----------------\n","def stratified_sample(df, target_col, frac=None, n=None, random_state=42):\n","    \"\"\"Return stratified sample keeping target ratio\"\"\"\n","    if frac is not None:\n","        df_sampled = df.groupby(target_col, group_keys=False)\\\n","                       .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n","    elif n is not None:\n","        class_counts = df[target_col].value_counts()\n","        total = class_counts.sum()\n","        df_sampled = []\n","        for c, count in class_counts.items():\n","            take = int(n * (count / total))\n","            df_sampled.append(df[df[target_col] == c].sample(n=take, random_state=random_state))\n","        df_sampled = pd.concat(df_sampled)\n","    else:\n","        df_sampled = df\n","    return df_sampled.sample(frac=1.0, random_state=random_state).reset_index(drop=True)"]},{"cell_type":"code","source":["dataset = \"B\"\n","\n","if dataset == \"A\":\n","  dataset_name = \"/content/drive/MyDrive/wustl_iiot_2021.csv\"\n","  target = 'Target'\n","  drop_cols = [\"StartTime\", \"LastTime\", \"Traffic\", \"SrcAddr\", \"DstAddr\"]\n","  frac=0.1\n","elif dataset == \"B\":\n","  dataset_name = \"/content/drive/MyDrive/creditcard.csv\"\n","  target = 'Class'\n","  drop_cols = [\"Time\"]\n","  frac=0.5"],"metadata":{"id":"zNLyODO3h4nL","executionInfo":{"status":"ok","timestamp":1760957145036,"user_tz":-480,"elapsed":6,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7858,"status":"ok","timestamp":1760957156349,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"tqQUooD0aAPH","outputId":"d088cd5f-8141-479c-e926-95c70e10c221"},"outputs":[{"output_type":"stream","name":"stdout","text":["Original dataset shape: (284807, 30), anomaly ratio=0.1727%\n","Sampled dataset shape: (142404, 30), anomaly ratio=0.1727%\n"]},{"output_type":"stream","name":"stderr","text":["/tmp/ipython-input-2184620091.py:8: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n","  .apply(lambda x: x.sample(frac=frac, random_state=random_state))\n"]},{"output_type":"stream","name":"stdout","text":["Train shape: (75948, 30), anomaly ratio=0.1725%\n","Valid shape: (37975, 30), anomaly ratio=0.1738%\n","Test shape:  (28481, 30),  anomaly ratio=0.1720%\n","['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', 'V15', 'V16', 'V17', 'V18', 'V19', 'V20', 'V21', 'V22', 'V23', 'V24', 'V25', 'V26', 'V27', 'V28', 'Amount']\n","['Set']\n","[]\n"]}],"source":["df = pd.read_csv(dataset_name)\n","\n","df = df.drop(columns=[c for c in drop_cols if c in df.columns])\n","\n","print(f\"Original dataset shape: {df.shape}, anomaly ratio={df[target].mean():.4%}\")\n","\n","# Stratified sampling\n","df_sampled = stratified_sample(df, target, frac=frac, random_state=0)\n","print(f\"Sampled dataset shape: {df_sampled.shape}, anomaly ratio={df_sampled[target].mean():.4%}\")\n","\n","df_sampled = df_sampled.reset_index(drop=True)\n","\n","features = df_sampled.columns\n","\n","train_df, test_df = train_test_split(\n","    df_sampled, test_size=0.2, stratify=df_sampled[target], random_state=0\n",")\n","\n","train_df, valid_df = train_test_split(\n","    train_df, test_size= 0.2 / 0.6, stratify=train_df[target], random_state=0\n",")\n","\n","print(f\"Train shape: {train_df.shape}, anomaly ratio={train_df[target].mean():.4%}\")\n","print(f\"Valid shape: {valid_df.shape}, anomaly ratio={valid_df[target].mean():.4%}\")\n","print(f\"Test shape:  {test_df.shape},  anomaly ratio={test_df[target].mean():.4%}\")\n","\n","# Add the \"Set\" column\n","train_df[\"Set\"] = \"train\"\n","valid_df[\"Set\"] = \"valid\"\n","test_df[\"Set\"] = \"test\"\n","\n","# Combine them back together\n","train = pd.concat([train_df, valid_df, test_df]).reset_index(drop=True)\n","\n","train_indices = train[train.Set == \"train\"].index\n","valid_indices = train[train.Set == \"valid\"].index\n","test_indices = train[train.Set == \"test\"].index\n","\n","\n","categorical_columns = []\n","categorical_dims = {}\n","\n","nunique = train.nunique()\n","types = train.dtypes\n","\n","for col in train.columns:\n","    if types[col] == 'object':\n","        l_enc = LabelEncoder()\n","        train[col] = train[col].fillna(\"VV_likely\")\n","        train[col] = l_enc.fit_transform(train[col].values)\n","        categorical_columns.append(col)\n","        categorical_dims[col] = len(l_enc.classes_)\n","    else:\n","        train.fillna(train.loc[train_indices, col].mean(), inplace=True)\n","\n","unused_feat = [\"Set\"]\n","\n","features = [col for col in df_sampled.columns if col not in unused_feat + [target]]\n","\n","print(features)\n","\n","cat_idxs = [i for i, f in enumerate(features) if f in categorical_columns]\n","\n","cat_dims = [categorical_dims[f] for i, f in enumerate(features) if f in categorical_columns]\n","\n","print(categorical_columns)\n","print(cat_dims)"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1760957160058,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"c-yxDUQHxt6F"},"outputs":[],"source":["target_enc = LabelEncoder()\n","train[target] = target_enc.fit_transform(train[target].values)"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1760957161767,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"oXFTqW5IblTA"},"outputs":[],"source":["X_train = train[features].values[train_indices]\n","y_train = train[target].values[train_indices]\n","\n","X_valid = train[features].values[valid_indices]\n","y_valid = train[target].values[valid_indices]\n","\n","X_test = train[features].values[test_indices]\n","y_test = train[target].values[test_indices]"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":79,"status":"ok","timestamp":1760957163748,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"XEizQZmXgxQm"},"outputs":[],"source":["# Split the data into categorical and continuous parts\n","X_train_categ = torch.tensor(X_train[:, cat_idxs], dtype=torch.long)\n","X_train_cont = torch.tensor(np.delete(X_train, cat_idxs, axis=1), dtype=torch.float32)\n","y_train_tensor = torch.tensor(y_train, dtype=torch.long)\n","\n","X_valid_categ = torch.tensor(X_valid[:, cat_idxs], dtype=torch.long)\n","X_valid_cont = torch.tensor(np.delete(X_valid, cat_idxs, axis=1), dtype=torch.float32)\n","y_valid_tensor = torch.tensor(y_valid, dtype=torch.long)\n","\n","X_test_categ = torch.tensor(X_test[:, cat_idxs], dtype=torch.long)\n","X_test_cont = torch.tensor(np.delete(X_test, cat_idxs, axis=1), dtype=torch.float32)\n","y_test_tensor = torch.tensor(y_test, dtype=torch.long)\n","\n","# Create DataLoaders\n","train_dataset = TensorDataset(X_train_categ, X_train_cont, y_train_tensor)\n","train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n","\n","valid_dataset = TensorDataset(X_valid_categ, X_valid_cont, y_valid_tensor)\n","valid_loader = DataLoader(valid_dataset, batch_size=32, shuffle=False)\n","\n","test_dataset = TensorDataset(X_test_categ, X_test_cont, y_test_tensor)\n","test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)"]},{"cell_type":"markdown","metadata":{"id":"6t0AMSr8y2Pe"},"source":["======================================================================"]},{"cell_type":"markdown","metadata":{"id":"Lbv9mESCyQNX"},"source":["==================================Model================================"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":58,"status":"ok","timestamp":1760957165909,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"t9qv3vmlzpQx"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","\n","from einops import rearrange"]},{"cell_type":"code","execution_count":52,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1760962981513,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"5UmJ2xwyy-AA"},"outputs":[],"source":["import torch\n","import torch.nn.functional as F\n","from torch import nn, einsum\n","from einops import rearrange, repeat\n","\n","# ---------- Feedforward block ----------\n","class GEGLU(nn.Module):\n","    def forward(self, x):\n","        x, gates = x.chunk(2, dim=-1)\n","        return x * F.gelu(gates)\n","\n","def FeedForward(dim, mult=4, dropout=0.):\n","    return nn.Sequential(\n","        nn.LayerNorm(dim),\n","        nn.Linear(dim, dim * mult * 2),\n","        GEGLU(),\n","        nn.Dropout(dropout),\n","        nn.Linear(dim * mult, dim)\n","    )\n","\n","# ---------- Base Attention ----------\n","class Attention(nn.Module):\n","    def __init__(self, dim, heads=8, dim_head=64, dropout=0.):\n","        super().__init__()\n","        inner_dim = dim_head * heads\n","        self.heads = heads\n","        self.scale = dim_head ** -0.5\n","\n","        self.norm = nn.LayerNorm(dim)\n","        self.to_qkv = nn.Linear(dim, inner_dim * 3, bias=False)\n","        self.to_out = nn.Linear(inner_dim, dim, bias=False)\n","        self.dropout = nn.Dropout(dropout)\n","\n","    def forward(self, x):\n","        h = self.heads\n","        x = self.norm(x)\n","        q, k, v = self.to_qkv(x).chunk(3, dim=-1)\n","        q, k, v = map(lambda t: rearrange(t, 'b n (h d) -> b h n d', h=h), (q, k, v))\n","        q = q * self.scale\n","        sim = einsum('b h i d, b h j d -> b h i j', q, k)\n","        attn = sim.softmax(dim=-1)\n","        attn = self.dropout(attn)\n","        out = einsum('b h i j, b h j d -> b h i d', attn, v)\n","        out = rearrange(out, 'b h n d -> b n (h d)', h=h)\n","        out = self.to_out(out)\n","        return out, attn\n","\n","# ---------- MoE Attention ----------\n","class MoEAttention(nn.Module):\n","    def __init__(self, dim, num_experts=4, heads=8, dim_head=64, dropout=0.):\n","        super().__init__()\n","        self.num_experts = num_experts\n","        self.experts = nn.ModuleList([\n","            Attention(dim, heads=heads, dim_head=dim_head, dropout=dropout)\n","            for _ in range(num_experts)\n","        ])\n","        # gating network – learns routing weights\n","        self.gate = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.Linear(dim, num_experts),\n","            nn.Softmax(dim=-1)\n","        )\n","\n","    def forward(self, x):\n","        # gate per sample (batch-level)\n","        gate_weights = self.gate(x.mean(dim=1))           # (B, num_experts)\n","        expert_outputs, attn_maps = [], []\n","\n","        for expert in self.experts:\n","            out, attn = expert(x)\n","            expert_outputs.append(out)\n","            attn_maps.append(attn)\n","\n","        # weighted combine of expert outputs\n","        out = sum(w[:, None, None] * e for w, e in zip(gate_weights.T, expert_outputs))\n","        return out, attn_maps, gate_weights\n","\n","# ---------- Transformer with MoE ----------\n","class Transformer(nn.Module):\n","    def __init__(self, dim, depth, heads, dim_head, attn_dropout, ff_dropout, use_moe=False, num_experts=4):\n","        super().__init__()\n","        self.layers = nn.ModuleList([])\n","        for _ in range(depth):\n","            attn_layer = MoEAttention(dim, num_experts=num_experts, heads=heads, dim_head=dim_head, dropout=attn_dropout) \\\n","                if use_moe else Attention(dim, heads=heads, dim_head=dim_head, dropout=attn_dropout)\n","            self.layers.append(nn.ModuleList([\n","                attn_layer,\n","                FeedForward(dim, dropout=ff_dropout),\n","            ]))\n","        self.use_moe = use_moe\n","\n","    def forward(self, x, return_attn=False):\n","        attn_info = []\n","        for attn, ff in self.layers:\n","            if self.use_moe:\n","                attn_out, attn_maps, gate_weights = attn(x)\n","                attn_info.append((attn_maps, gate_weights))\n","            else:\n","                attn_out, attn_maps = attn(x)\n","                attn_info.append(attn_maps)\n","            x = attn_out + x\n","            x = ff(x) + x\n","        if not return_attn:\n","            return x\n","        return x, attn_info\n","\n","# ---------- Numeric MLP ----------\n","class NumericMLP(nn.Module):\n","    def __init__(self, num_numeric_features, dim, hidden_dims=[64, 64]):\n","        super().__init__()\n","        layers = []\n","        input_dim = num_numeric_features\n","        for h_dim in hidden_dims:\n","            layers.append(nn.Linear(input_dim, h_dim))\n","            layers.append(nn.BatchNorm1d(h_dim))\n","            layers.append(nn.ReLU())\n","            layers.append(nn.Dropout(0.1))\n","            input_dim = h_dim\n","        layers.append(nn.Linear(input_dim, dim))\n","        self.mlp = nn.Sequential(*layers)\n","\n","    def forward(self, x):\n","        return self.mlp(x)\n","\n","# ---------- Full FTTransformerFusion-MoE ----------\n","class FTTransformerFusionMoE(nn.Module):\n","    def __init__(\n","        self,\n","        *,\n","        categories,\n","        num_continuous,\n","        dim,\n","        depth,\n","        heads,\n","        dim_head=16,\n","        dim_out=1,\n","        num_special_tokens=2,\n","        attn_dropout=0.,\n","        ff_dropout=0.,\n","        mlp_hidden_dims=[64, 64],\n","        use_moe=True,\n","        num_experts=4\n","    ):\n","        super().__init__()\n","        self.num_categories = len(categories)\n","        self.num_unique_categories = sum(categories)\n","        self.num_special_tokens = num_special_tokens\n","        total_tokens = self.num_unique_categories + num_special_tokens\n","\n","        if self.num_unique_categories > 0:\n","            categories_offset = F.pad(torch.tensor(list(categories)), (1, 0), value=num_special_tokens)\n","            categories_offset = categories_offset.cumsum(dim=-1)[:-1]\n","            self.register_buffer('categories_offset', categories_offset)\n","            self.categorical_embeds = nn.Embedding(total_tokens, dim)\n","\n","        self.num_continuous = num_continuous\n","        if self.num_continuous > 0:\n","            self.numeric_mlp = NumericMLP(num_continuous, dim, mlp_hidden_dims)\n","\n","        self.cls_token = nn.Parameter(torch.randn(1, 1, dim))\n","\n","        # 🔥 Transformer with MoE Attention\n","        self.transformer = Transformer(\n","            dim=dim,\n","            depth=depth,\n","            heads=heads,\n","            dim_head=dim_head,\n","            attn_dropout=attn_dropout,\n","            ff_dropout=ff_dropout,\n","            use_moe=use_moe,\n","            num_experts=num_experts\n","        )\n","\n","        self.to_logits = nn.Sequential(\n","            nn.LayerNorm(dim),\n","            nn.ReLU(),\n","            nn.Linear(dim, dim_out)\n","        )\n","\n","    def forward(self, x_categ, x_numer, return_attn=False):\n","        xs = []\n","        num_residual = None\n","\n","        if self.num_unique_categories > 0:\n","            x_categ = x_categ + self.categories_offset\n","            x_categ = self.categorical_embeds(x_categ)\n","            xs.append(x_categ)\n","\n","        if self.num_continuous > 0:\n","            x_numer_emb = self.numeric_mlp(x_numer)\n","            num_residual = x_numer_emb\n","            x_numer_emb = x_numer_emb.unsqueeze(1)\n","            xs.append(x_numer_emb)\n","\n","        x = torch.cat(xs, dim=1)\n","        b = x.shape[0]\n","        cls_tokens = repeat(self.cls_token, '1 1 d -> b 1 d', b=b)\n","        x = torch.cat((cls_tokens, x), dim=1)\n","\n","        x, attn_info = self.transformer(x, return_attn=True)\n","        x = x[:, 0]\n","        if num_residual is not None:\n","            x = x + 0.2 * num_residual\n","        logits = self.to_logits(x)\n","\n","        if not return_attn:\n","            return logits\n","        return logits, attn_info"]},{"cell_type":"markdown","metadata":{"id":"GQbua9hnyb3t"},"source":["======================================================================="]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"],"metadata":{"id":"xw2OxaMb9nHI","executionInfo":{"status":"ok","timestamp":1760962872590,"user_tz":-480,"elapsed":2,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":49,"outputs":[]},{"cell_type":"code","execution_count":53,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1760962982004,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"},"user_tz":-480},"id":"GP2nhw8Hx73H"},"outputs":[],"source":["model = FTTransformerFusionMoE(\n","    categories=cat_dims,           # [] for creditcard.csv\n","    num_continuous=len(features) - len(cat_dims),\n","    dim=32,\n","    depth=4,\n","    heads=8,\n","    dim_head=16,\n","    dim_out=1,\n","    attn_dropout=0.1,\n","    ff_dropout=0.1,\n","    use_moe=True,                  # enable mixture of experts\n","    num_experts=4                  # tune 2–4 for your dataset\n",").to(device)"]},{"cell_type":"code","source":["import torch\n","import torch.nn.functional as F\n","from torch import nn\n","\n","class FocalLoss(nn.Module):\n","    \"\"\"\n","    Focal Loss for binary classification.\n","    Helps models focus on hard, minority examples.\n","    \"\"\"\n","    def __init__(self, alpha=5.0, gamma=2.0, reduction='mean'):\n","        super().__init__()\n","        self.alpha = alpha\n","        self.gamma = gamma\n","        self.reduction = reduction\n","\n","    def forward(self, logits, targets):\n","        \"\"\"\n","        logits: (batch,) or (batch, 1) raw model outputs\n","        targets: (batch,) binary labels 0 or 1\n","        \"\"\"\n","        targets = targets.float().view(-1, 1)\n","        logits = logits.view(-1, 1)\n","\n","        bce_loss = F.binary_cross_entropy_with_logits(logits, targets, reduction='none')\n","        pt = torch.exp(-bce_loss)  # probability of the correct class\n","        focal_term = self.alpha * (1 - pt) ** self.gamma * bce_loss\n","\n","        if self.reduction == 'mean':\n","            return focal_term.mean()\n","        elif self.reduction == 'sum':\n","            return focal_term.sum()\n","        return focal_term"],"metadata":{"id":"ENC6o4HZTGAU","executionInfo":{"status":"ok","timestamp":1760962928497,"user_tz":-480,"elapsed":2,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}}},"execution_count":51,"outputs":[]},{"cell_type":"code","execution_count":54,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OquETEtzzZ-V","executionInfo":{"status":"ok","timestamp":1760964930297,"user_tz":-480,"elapsed":1940394,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"6205299e-3b2e-4c52-d0f4-b3f9690c73ad"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 01 | Loss=0.0249 | Val F1=0.7009 | Thr=0.22 | Avg Gates: [g0:0.08, g1:0.40, g2:0.15, g3:0.37]\n","Epoch 02 | Loss=0.0080 | Val F1=0.7317 | Thr=0.14 | Avg Gates: [g0:0.08, g1:0.44, g2:0.12, g3:0.36]\n","Epoch 03 | Loss=0.0066 | Val F1=0.7377 | Thr=0.16 | Avg Gates: [g0:0.06, g1:0.52, g2:0.09, g3:0.34]\n","Epoch 04 | Loss=0.0071 | Val F1=0.7049 | Thr=0.11 | Avg Gates: [g0:0.04, g1:0.37, g2:0.08, g3:0.52]\n","Epoch 05 | Loss=0.0075 | Val F1=0.7317 | Thr=0.11 | Avg Gates: [g0:0.04, g1:0.28, g2:0.09, g3:0.58]\n","Epoch 06 | Loss=0.0066 | Val F1=0.7500 | Thr=0.08 | Avg Gates: [g0:0.01, g1:0.15, g2:0.04, g3:0.79]\n","Epoch 07 | Loss=0.0072 | Val F1=0.7520 | Thr=0.10 | Avg Gates: [g0:0.01, g1:0.11, g2:0.03, g3:0.85]\n","Epoch 08 | Loss=0.0072 | Val F1=0.7009 | Thr=0.50 | Avg Gates: [g0:0.02, g1:0.05, g2:0.03, g3:0.90]\n","Epoch 09 | Loss=0.0066 | Val F1=0.7317 | Thr=0.11 | Avg Gates: [g0:0.03, g1:0.03, g2:0.02, g3:0.92]\n","Epoch 10 | Loss=0.0069 | Val F1=0.7500 | Thr=0.22 | Avg Gates: [g0:0.03, g1:0.05, g2:0.03, g3:0.89]\n","Epoch 11 | Loss=0.0058 | Val F1=0.7559 | Thr=0.27 | Avg Gates: [g0:0.08, g1:0.10, g2:0.05, g3:0.77]\n","Epoch 12 | Loss=0.0055 | Val F1=0.7500 | Thr=0.25 | Avg Gates: [g0:0.04, g1:0.07, g2:0.03, g3:0.86]\n","Epoch 13 | Loss=0.0053 | Val F1=0.7500 | Thr=0.22 | Avg Gates: [g0:0.03, g1:0.07, g2:0.02, g3:0.88]\n","Epoch 14 | Loss=0.0055 | Val F1=0.7500 | Thr=0.10 | Avg Gates: [g0:0.03, g1:0.07, g2:0.02, g3:0.88]\n","Epoch 15 | Loss=0.0054 | Val F1=0.7500 | Thr=0.38 | Avg Gates: [g0:0.06, g1:0.08, g2:0.03, g3:0.83]\n","Epoch 16 | Loss=0.0052 | Val F1=0.7500 | Thr=0.19 | Avg Gates: [g0:0.07, g1:0.09, g2:0.04, g3:0.81]\n","Epoch 17 | Loss=0.0047 | Val F1=0.7500 | Thr=0.31 | Avg Gates: [g0:0.05, g1:0.08, g2:0.04, g3:0.82]\n","Epoch 18 | Loss=0.0046 | Val F1=0.7500 | Thr=0.17 | Avg Gates: [g0:0.05, g1:0.08, g2:0.04, g3:0.83]\n","Epoch 19 | Loss=0.0046 | Val F1=0.7500 | Thr=0.28 | Avg Gates: [g0:0.07, g1:0.09, g2:0.04, g3:0.80]\n","Epoch 20 | Loss=0.0045 | Val F1=0.7500 | Thr=0.33 | Avg Gates: [g0:0.06, g1:0.09, g2:0.04, g3:0.81]\n","\n","✅ Best Validation F1: 0.7559 at threshold=0.27\n"]}],"source":["from sklearn.metrics import f1_score\n","import numpy as np\n","import torch\n","\n","# --- Optimizer + Scheduler ---\n","optimizer = torch.optim.AdamW(model.parameters(), lr=1e-3, weight_decay=1e-2)\n","scheduler = torch.optim.lr_scheduler.OneCycleLR(\n","    optimizer, max_lr=1e-3, steps_per_epoch=len(train_loader), epochs=20\n",")\n","\n","# --- Loss Function ---\n","criterion = FocalLoss(alpha=5.0, gamma=2.0)\n","\n","# --- Training ---\n","best_val_f1, best_model_state, best_threshold = 0.0, None, 0.5\n","\n","for epoch in range(1, 21):\n","    model.train()\n","    total_loss = 0.0\n","\n","    for x_cat, x_num, y in train_loader:\n","        x_cat, x_num, y = x_cat.to(device), x_num.to(device), y.to(device)\n","        optimizer.zero_grad()\n","        logits = model(x_cat, x_num)\n","        loss = criterion(logits, y)\n","        loss.backward()\n","        optimizer.step()\n","        scheduler.step()\n","        total_loss += loss.item()\n","\n","    # --- Validation Phase ---\n","    model.eval()\n","    preds, labels = [], []\n","    gating_stats = []  # track average gate activations per batch (for explainability)\n","\n","    with torch.no_grad():\n","        for x_cat, x_num, y in valid_loader:\n","            x_cat, x_num = x_cat.to(device), x_num.to(device)\n","            logits, attn_info = model(x_cat, x_num, return_attn=True)\n","\n","            # collect mixture-of-experts gating info (first transformer layer)\n","            _, gate_weights = attn_info[0]  # (attn_maps, gate_weights)\n","            gating_stats.append(gate_weights.cpu().numpy())\n","\n","            probs = torch.sigmoid(logits).cpu().numpy().flatten()\n","            preds.extend(probs)\n","            labels.extend(y.numpy())\n","\n","    # --- Compute Validation F1 across thresholds ---\n","    thresholds = np.linspace(0.05, 0.5, 30)\n","    f1s = [f1_score(labels, (np.array(preds) > t).astype(int)) for t in thresholds]\n","    best_t_idx = np.argmax(f1s)\n","    val_f1, best_t = f1s[best_t_idx], thresholds[best_t_idx]\n","\n","    if val_f1 > best_val_f1:\n","        best_val_f1 = val_f1\n","        best_model_state = model.state_dict()\n","        best_threshold = best_t\n","\n","    avg_gate = np.mean(np.concatenate(gating_stats, axis=0), axis=0)\n","    gate_str = \", \".join([f\"g{i}:{w:.2f}\" for i, w in enumerate(avg_gate)])\n","\n","    print(\n","        f\"Epoch {epoch:02d} | \"\n","        f\"Loss={total_loss/len(train_loader):.4f} | \"\n","        f\"Val F1={val_f1:.4f} | Thr={best_t:.2f} | \"\n","        f\"Avg Gates: [{gate_str}]\"\n","    )\n","\n","# --- Save best model ---\n","model.load_state_dict(best_model_state)\n","print(f\"\\n✅ Best Validation F1: {best_val_f1:.4f} at threshold={best_threshold:.2f}\")"]},{"cell_type":"code","source":["print(test_df[target].value_counts())\n","print(\"\\nAnomaly ratio:\", test_df[target].mean())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1oYHYVtui09U","executionInfo":{"status":"ok","timestamp":1760964936662,"user_tz":-480,"elapsed":4,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"444f5a05-698a-4aa0-bd19-101445259749"},"execution_count":55,"outputs":[{"output_type":"stream","name":"stdout","text":["Class\n","0    28432\n","1       49\n","Name: count, dtype: int64\n","\n","Anomaly ratio: 0.0017204452090867595\n"]}]},{"cell_type":"code","execution_count":56,"metadata":{"id":"0_u9H5FB55j0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1760964949082,"user_tz":-480,"elapsed":9971,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"e758e4b6-403e-486b-b7c7-65cfd3ca0ec3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Preds: 28481 Labels: 28481\n","Test F1: 0.7920792079207921\n"]}],"source":["# 5️⃣ Final test evaluation\n","model.eval()\n","test_probs = []\n","\n","with torch.no_grad():\n","    for x_categ, x_cont, _ in test_loader:\n","        x_categ = x_categ.to(device)\n","        x_cont = x_cont.to(device)\n","        logits = model(x_cat, x_cont)\n","        test_probs.extend(torch.sigmoid(logits).cpu().numpy().flatten())\n","\n","# Ensure same length as y_test\n","print(\"Preds:\", len(test_probs), \"Labels:\", len(y_test))\n","\n","# F1 computation\n","y_pred = (np.array(test_probs) > best_t).astype(int)\n","test_f1 = f1_score(y_test, y_pred)\n","print(\"Test F1:\", test_f1)"]},{"cell_type":"code","execution_count":57,"metadata":{"id":"zGZ9KqXK0AiS","colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"status":"ok","timestamp":1760964953496,"user_tz":-480,"elapsed":14,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"87577883-94bb-4171-af7f-21bad6cf2b4d"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["# Confusion Matrix\n","cm = confusion_matrix(y_test, y_pred)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n","disp.plot(cmap=plt.cm.Blues)\n","plt.title(\"Confusion Matrix\")\n","plt.show()"]},{"cell_type":"code","source":["# Accuracy, Precision, Recall, F1-Score\n","accuracy = accuracy_score(y_test, y_pred)\n","precision = precision_score(y_test, y_pred)\n","recall = recall_score(y_test, y_pred)\n","f1 = f1_score(y_test, y_pred)\n","auc = roc_auc_score(y_test, y_pred)\n","\n","\n","# Print individual scores\n","print(f\"Accuracy: {accuracy:.4f}\")\n","print(f\"Precision: {precision:.4f}\")\n","print(f\"Recall: {recall:.4f}\")\n","print(f\"F1-Score: {f1:.4f}\")\n","print(f\"ROC-AUC: {auc:.4f}\")\n","\n","# Classification report for a detailed overview\n","print(classification_report(y_test, y_pred))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VhO2p17A9x-K","executionInfo":{"status":"ok","timestamp":1760964957389,"user_tz":-480,"elapsed":26,"user":{"displayName":"Munkhzaya Bayanbat","userId":"02841352344795048115"}},"outputId":"77a38e5c-9797-4c18-e850-d54af8b467cb"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy: 0.9993\n","Precision: 0.7692\n","Recall: 0.8163\n","F1-Score: 0.7921\n","ROC-AUC: 0.9080\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00     28432\n","           1       0.77      0.82      0.79        49\n","\n","    accuracy                           1.00     28481\n","   macro avg       0.88      0.91      0.90     28481\n","weighted avg       1.00      1.00      1.00     28481\n","\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"zOAg6qHesSdz"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyPvwkcWp0ALlqiuodw7ONmH"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}